<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手写简易LinkedLsit</title>
    <url>/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/</url>
    <content><![CDATA[<p>​        LinkedList属于List接口的实现类之一，与ArrayList不同之处是采用的存储结构不同，ArrayList的数据结构为线性表，而LinkedList数据结构是链表。链表数据结构的特点是每个元素分配的空间不必连续、插入和删除元素时速度非常快、但访问元素的速度较慢。LinkedList是一个双向链表, 当数据量很大或者操作很频繁的情况下，添加和删除元素时具有比ArrayList更好的性能。但在元素的查询和修改方面要弱于ArrayList。LinkedList类每个结点用内部类Node表示，LinkedList通过first和last引用分别指向链表的第一个和最后一个元素，当链表为空时，first和last都为NULL值。</p>
<a id="more"></a>

<h3 id="一，关于链表"><a href="#一，关于链表" class="headerlink" title="一，关于链表"></a>一，关于链表</h3><table>
<thead>
<tr>
<th>类型</th>
<th>包含节点</th>
<th>第一和最后节点指向</th>
</tr>
</thead>
<tbody><tr>
<td>单向链表</td>
<td>尾节点</td>
<td>尾的next=&gt;null</td>
</tr>
<tr>
<td>单向循环链表</td>
<td>尾节点</td>
<td>尾的next=&gt;头</td>
</tr>
<tr>
<td>双向链表</td>
<td>头，尾节点</td>
<td>每个节点头尾各自对应前后元素，first和last的prev/next对应null</td>
</tr>
<tr>
<td>双向循环链表</td>
<td>头，尾节点</td>
<td>last的next=&gt;first，first的next=&gt;last</td>
</tr>
</tbody></table>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/single_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/single_for_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/double_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/double_for_list.webp" alt></p>
<h3 id="二，关于LinkedList"><a href="#二，关于LinkedList" class="headerlink" title="二，关于LinkedList"></a>二，关于LinkedList</h3><p>LinkedList 是一个继承于AbstractSequentialList的<strong>双向循环链表</strong>。它也可以被当作堆栈、队列或双端队列进行操作。<br>LinkedList 实现 List 接口，能对它进行<strong>队列</strong>操作。<br>LinkedList 实现 Deque 接口，即能将LinkedList当作<strong>双端队列</strong>使用。<br>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能<strong>克隆</strong>。<br>LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持<strong>序列化</strong>，能通过序列化去传输。<br>LinkedList 是<strong>非同步</strong>的。</p>
<h3 id="三，实现的功能"><a href="#三，实现的功能" class="headerlink" title="三，实现的功能"></a>三，实现的功能</h3><p>​        –尾部添加，索引查找，索引插入，索引修改，索引删除</p>
<h3 id="四，构建节点"><a href="#四，构建节点" class="headerlink" title="四，构建节点"></a>四，构建节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;		<span class="comment">//作为LinkedListC的内部类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; prev;	<span class="comment">//头节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    E data;			<span class="comment">//数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; next;	<span class="comment">//尾节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.prev = prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data = data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.next = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="五，构建LinkedList"><a href="#五，构建LinkedList" class="headerlink" title="五，构建LinkedList"></a>五，构建LinkedList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListC</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size=<span class="number">0</span>;		<span class="comment">//链表长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;	<span class="comment">//首部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;	<span class="comment">//尾部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span>				<span class="comment">//重写toString方法，便于观察</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder llc=<span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(first.data+<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.setCharAt(llc.length()-<span class="number">1</span>,<span class="string">']'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(<span class="string">"]"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> llc.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="六，方法的编写"><a href="#六，方法的编写" class="headerlink" title="六，方法的编写"></a>六，方法的编写</h3><h4 id="获取索引所代表的节点-getNode-int-index"><a href="#获取索引所代表的节点-getNode-int-index" class="headerlink" title="获取索引所代表的节点[getNode(int index)]"></a>获取索引所代表的节点[getNode(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;			<span class="comment">//分成了前后两部分，提高效率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"索引越界："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;=size/<span class="number">2</span>)&#123;				<span class="comment">//前半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//后半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size-index-<span class="number">1</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="尾部添加-add-E-e"><a href="#尾部添加-add-E-e" class="headerlink" title="尾部添加[add(E,e)]"></a>尾部添加[add(E,e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node&lt;E&gt; node=<span class="keyword">new</span> Node&lt;E&gt;(e);	<span class="comment">//新建节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;				<span class="comment">//第一次添加，设置头尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;							<span class="comment">//其他添加，尾部插入新节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            							<span class="comment">//并改变first的prev指向和last</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            last.next=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;							<span class="comment">//长度+1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引添加-insert-int-index-E-e"><a href="#索引添加-insert-int-index-E-e" class="headerlink" title="索引添加[insert(int index,E e)]"></a>索引添加[insert(int index,E e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);		<span class="comment">//获取索引的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node newnode=<span class="keyword">new</span> Node(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) &#123;			</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev = node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.next = node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev = node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//只有一个节点的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//如果是第一个节点，将其设为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引查询-get-int-index"><a href="#索引查询-get-int-index" class="headerlink" title="索引查询[get(int index)]"></a>索引查询[get(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> getNode(index).data.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引修改-set-int-index"><a href="#索引修改-set-int-index" class="headerlink" title="索引修改[set(int index)]"></a>索引修改[set(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"即将将索引为"</span>+index+<span class="string">"的数改为"</span>+e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        getNode(index).data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引删除-remove-int-index"><a href="#索引删除-remove-int-index" class="headerlink" title="索引删除[remove(int index)]"></a>索引删除[remove(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"要删除的索引是："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>)&#123;				<span class="comment">//不止一个时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_next=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_next.prev=node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//第一个时，设置为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                first=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;								<span class="comment">//只有一个时，恢复出厂设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size--;								<span class="comment">//长度-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h3 id="七，测试过程"><a href="#七，测试过程" class="headerlink" title="七，测试过程"></a>七，测试过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LinkedListC&lt;Integer&gt; li= <span class="keyword">new</span> LinkedListC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(li.toString());<span class="comment">//检验toString方法，此时为空链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.add(<span class="number">1</span>);				<span class="comment">//添加一个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行add方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.set(<span class="number">0</span>,<span class="number">9</span>);			<span class="comment">//将刚刚的1修改为9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行set方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行get方法后："</span>+li.get(<span class="number">0</span>));	<span class="comment">//获取第一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.remove(<span class="number">0</span>);			<span class="comment">//移除那个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行remove方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.insert(<span class="number">0</span>,<span class="number">5</span>);		<span class="comment">//在那个1的地方插入5(由于已经被移除，所以不存在0索引将抛出异常)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行insert方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedLsit/test_result.png" alt></p>
<h3 id="八，总结"><a href="#八，总结" class="headerlink" title="八，总结"></a>八，总结</h3><p>真TM坑</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios综合练习(Cplayer播放器)</title>
    <url>/2020/02/07/Vue-Axios%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0-Cplayer%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h3 id="歌曲，评论，MV均来自网易云"><a href="#歌曲，评论，MV均来自网易云" class="headerlink" title="歌曲，评论，MV均来自网易云"></a>歌曲，评论，MV均来自网易云</h3><p><a href="/VueLearning/Cplayer.html">&gt;播放器点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios小练习(记事本，城市天气查询)</title>
    <url>/2020/02/06/Vue-Axios%E5%B0%8F%E7%BB%83%E4%B9%A0-%E8%AE%B0%E4%BA%8B%E6%9C%AC%EF%BC%8C%E5%9F%8E%E5%B8%82%E5%A4%A9%E6%B0%94%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><a href="/jishiben.html" target="ifr">&gt;记事本点这里&lt;</a></p>
<p><a href="/axios_learning.html" target="ifr">&gt;天气查询点这里&lt;</a>(该功能宣布GG，只能在本地用，那该死的http)</p>
<iframe src name="ifr" width="800px" height="336px" marginwidth="0" marginheight="0" frameborder="0" margin="0" style="background:pink;border-radius:5px;"></iframe>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础指令学习</title>
    <url>/2020/02/05/Vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="/VueLearning/vuejichu.html">&gt;具体网页点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一则随机笑话(每20s刷新)</title>
    <url>/2020/02/04/%E4%B8%80%E5%88%99%E9%9A%8F%E6%9C%BA%E7%AC%91%E8%AF%9D-%E6%AF%8F20s%E5%88%B7%E6%96%B0/</url>
    <content><![CDATA[<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script type="text/javascript" src="/js/random-joke.js"></script>

<h4 id="joke" style="color:red">随机笑话在这显示，如果你一直都能看到这句话，说明我出BUG了

</h4>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot入门</title>
    <url>/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h2><p>​        对于一个刚学了9天，且仅仅了解一点点Spring，SpringMVC的人来说，Spring Boot是Spring和SpringMVC的自动配置版，容易上手，只需导入相关模块的启动器，就可以使用，免去了大量xml文件的配置，并且内嵌了Tomcat(默认)，Jetty，Undertow。省去了配tomcat的烦恼。spring boot大量使用注解的方式进行开发，也可以通过重写配置类修改默认配置，非常的便捷。并且spring boot可以整合其他优秀的框架和技术。</p>
<p>​        这9天使用spring boot 2.2.2版本进行学习，看了一些视频，看了一些博客，还翻了官方文档，算是有了一个初步的了解。</p>
<a id="more"></a>

<hr>
<h2 id="Spring-Boot初体验之Hello-World"><a href="#Spring-Boot初体验之Hello-World" class="headerlink" title="Spring Boot初体验之Hello World"></a>Spring Boot初体验之Hello World</h2><h4 id="Spring-Boot工程目录结构"><a href="#Spring-Boot工程目录结构" class="headerlink" title="Spring Boot工程目录结构"></a>Spring Boot工程目录结构</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/SB%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="SB工程目录"></p>
<h4 id="导入Web模块依赖"><a href="#导入Web模块依赖" class="headerlink" title="导入Web模块依赖"></a>导入Web模块依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HelloController &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @ResponseBody</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String hello()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Hello World!&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="运行主程序"><a href="#运行主程序" class="headerlink" title="运行主程序"></a>运行主程序</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E4%B8%BB%E7%A8%8B%E5%BA%8F.png" alt></p>
<h4 id="控制台打印的日志信息"><a href="#控制台打印的日志信息" class="headerlink" title="控制台打印的日志信息"></a>控制台打印的日志信息</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E6%97%A5%E5%BF%97.png" alt></p>
<h4 id="浏览器访问8080端口发送hello请求"><a href="#浏览器访问8080端口发送hello请求" class="headerlink" title="浏览器访问8080端口发送hello请求"></a>浏览器访问8080端口发送hello请求</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/hello.png" alt></p>
<h4 id="第一步走出去了！！！"><a href="#第一步走出去了！！！" class="headerlink" title="第一步走出去了！！！"></a>第一步走出去了！！！</h4><h2 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h2>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次接触Mybatis</title>
    <url>/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6Mybatis/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#1工程目录">1.工程目录</a></li>
<li><a href="#2pornxml文件">2.porn.xml文件</a></li>
<li><a href="#3mybatis-configxml全局配置文件">3.mybatis-config.xml全局配置文件</a></li>
<li><a href="#4user类以及mysql中的user表">4.User类以及Mysql中的user表</a><ul>
<li><a href="#user类">User类</a></li>
<li><a href="#user表">user表</a></li>
</ul>
</li>
<li><a href="#5usermapperxml文件配置">5.UserMapper.xml文件配置</a></li>
<li><a href="#6编写测试类">6.编写测试类</a></li>
<li><a href="#7测试结果">7.测试结果</a></li>
<li><a href="#8感受">8.感受</a><ul>
<li><a href="#改革尚未成功同志仍需努力">改革尚未成功，同志仍需努力。</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

<a id="more"></a>

<h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><h2 id><a href="#" class="headerlink" title></a><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6Mybatis/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="工程目录"></h2><h2 id="porn-xml文件"><a href="#porn-xml文件" class="headerlink" title="porn.xml文件"></a>porn.xml文件</h2><pre><code>&lt;groupId&gt;com.study&lt;/groupId&gt;
&lt;artifactId&gt;LearnMybatis&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;8.0.17&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;1.2.12&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.13-rc-2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><hr>
<h2 id="mybatis-config-xml全局配置文件"><a href="#mybatis-config-xml全局配置文件" class="headerlink" title="mybatis-config.xml全局配置文件"></a>mybatis-config.xml全局配置文件</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration
    PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;

&lt;configuration&gt;
&lt;!-- 配置环境 --&gt;
    &lt;environments default=&quot;mysql&quot;&gt;
    &lt;!-- 配置mysql的环境--&gt;
        &lt;environment id=&quot;mysql&quot;&gt;
        &lt;!-- 配置事务的类型--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!-- 配置数据源（连接池） --&gt;
                &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;!-- 配置连接数据库的4个基本信息 --&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?    serverTimezone=UTC&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/study/mapper/UserMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</code></pre><hr>
<h2 id="User类以及Mysql中的user表"><a href="#User类以及Mysql中的user表" class="headerlink" title="User类以及Mysql中的user表"></a>User类以及Mysql中的user表</h2><h3 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6Mybatis/User%E7%B1%BB.png" alt="User类"></p>
<h3 id="user表"><a href="#user表" class="headerlink" title="user表"></a>user表</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6Mybatis/user%E8%A1%A8.png" alt="user表"></p>
<hr>
<h2 id="UserMapper-xml文件配置"><a href="#UserMapper-xml文件配置" class="headerlink" title="UserMapper.xml文件配置"></a>UserMapper.xml文件配置</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;!DOCTYPE mapper
    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.study.mapper.UserMapper&quot;&gt;
    &lt;select id=&quot;selectuser&quot; resultType=&quot;com.study.domain.User&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;select id=&quot;selectall&quot; resultType=&quot;com.study.domain.User&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;</code></pre><hr>
<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><pre><code>public class MybatisTest {

@Test
public static void main(String[] args) throws Exception{
    String resource=&quot;Mybatis-config.xml&quot;;
    InputStream in=Resources.getResourceAsStream(resource);
    SqlSessionFactory sqlsf=new SqlSessionFactoryBuilder().build(in);
    SqlSession os=sqlsf.openSession();
    try {
        //User u=os.selectOne(&quot;com.study.mapper.UserMapper.selectuser&quot;,1);
        List&lt;User&gt; ul=os.selectList(&quot;com.study.mapper.UserMapper.selectall&quot;);
        //System.out.println(u);
        for(User u:ul){
            System.out.println(u.getId()+&quot;,&quot;+u.getUsername()+&quot;\n&quot;);
        }
    }finally {
        os.close();
    }
}
}</code></pre><hr>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6Mybatis/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>   经过一番折腾，总算是把它弄出来了，在引用的时候要特别注意路径的问题，还有maven版本和mybatis版本也要注意，甚至时区问题都能有也是服了。mybatis类的属性名和表的字段名要一致。</p>
<h3 id="改革尚未成功，同志仍需努力。"><a href="#改革尚未成功，同志仍需努力。" class="headerlink" title="改革尚未成功，同志仍需努力。"></a>改革尚未成功，同志仍需努力。</h3>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>更换主题</title>
    <url>/2019/12/09/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>1 在E:\Hexo下用命令行安装：<br>    例如： git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia<br>2 配置：修改Hexo文件夹下_config.yml文件的theme为新主题名字<br>3 hexo clean 和 hexo g<br>4 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>发布文章</title>
    <url>/2019/12/09/%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>1 进入E:\Hexo目录<br>2 hexo new “文章标题”<br>3 在source/_posts下会生成.md文件<br>4 打开文件(Typora，VScode等软件)进行文章编写并保存<br>5 hexo clean清理<br>6 hexo g生成<br>7 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
