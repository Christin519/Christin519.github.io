<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC想吃火锅</title>
    <url>/2020/02/28/SpringMVC%E6%83%B3%E5%90%83%E7%81%AB%E9%94%85/</url>
    <content><![CDATA[<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><p>几个可写的属性</p>
<a id="more"></a>

<p>value：处理的请求名</p>
<p>params：规定参数必须满足的规则，params={“id”}表示必须带上id，{“!id”}表示必须不带id，{“id=0”}表示id必须等于0，等等表达式。这是一个数组，可以写多个规则</p>
<p>method：规定能处理的请求类型</p>
<p>headers：规定请求头</p>
<p>conosmes：规定请求头的Content-Type</p>
<p>produces：响应头的Content-Type</p>
<h2 id="Ant风格"><a href="#Ant风格" class="headerlink" title="Ant风格"></a>Ant风格</h2><p><img src="/2020/02/28/SpringMVC%E6%83%B3%E5%90%83%E7%81%AB%E9%94%85/ant.png" alt></p>
<h2 id="Rest风格URL"><a href="#Rest风格URL" class="headerlink" title="Rest风格URL"></a>Rest风格URL</h2><p>/资源名/资源标识符，以资源和请求方式区分对资源的操作。</p>
<p>问题：页面上只能发POST和GET两种</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在web.xml种添加过滤器Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span></pre></td></tr></table></figure>

<p>在发请求时带上隐藏参数，方法选择post</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"book/1"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"删除1号图书"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>

<p>控制器里根据类型处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"删除了"</span>+id+<span class="string">"号图书"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="又出现的问题"><a href="#又出现的问题" class="headerlink" title="又出现的问题"></a>又出现的问题</h3><p>tomcat高版本出现jsp不支持花里胡哨请求，显示405错误，在转发到的jsp页面的isErrorPage属性设置为true即可</p>
<h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><h3 id="注解接收"><a href="#注解接收" class="headerlink" title="注解接收"></a>注解接收</h3><p>如果方法入参和请求参数名字一样，那么默认这个入参接受请求参数</p>
<p>@RequestParam：指定请求参数对应方法入参，标注之后默认请求必须带上参数，可以通过required属性调整是否必须，defaultValue指定没带时的默认值。</p>
<p>@RequestHeader：指定请求头中属性对应入参，和上面一样。</p>
<p>@CookieValue：指定cookie中键对应入参，还和上面一样。</p>
<h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><p>当传入的参数为一个对象时，无需任何操作，只要将入参设置为那个对象，会自动将参数装成一个对象，没有的属性就是Null。并且支持级联属性，请求参数直接写xxx.yyy即可。</p>
<h3 id="原生API"><a href="#原生API" class="headerlink" title="原生API"></a>原生API</h3><p>支持在入参写HttpSession等原生的api，也可以取到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session</span><span class="params">(HttpSession session, HttpServletRequest request)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    session.setAttribute(<span class="string">"name"</span>,<span class="string">"hahaha"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    request.setAttribute(<span class="string">"talk"</span>,<span class="string">"xixixi"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"session"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="需要添加依赖"><a href="#需要添加依赖" class="headerlink" title="需要添加依赖"></a>需要添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Hello World!!!&lt;/h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">session $&#123;sessionScope.name&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">request $&#123;requestScope.talk&#125;</span></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="/2020/02/28/SpringMVC%E6%83%B3%E5%90%83%E7%81%AB%E9%94%85/session.png" alt></p>
<p>MockHttpSession实现了HttpSession接口，不过还是会报错，不知道为什么</p>
<h4 id="可以接收的参数类型"><a href="#可以接收的参数类型" class="headerlink" title="可以接收的参数类型"></a>可以接收的参数类型</h4><p><img src="/2020/02/28/SpringMVC%E6%83%B3%E5%90%83%E7%81%AB%E9%94%85/api.png" alt></p>
<p>Principal：https相关，Locale：和国际化有关的区域信息，IO流相关</p>
<h2 id="乱码处理"><a href="#乱码处理" class="headerlink" title="乱码处理"></a>乱码处理</h2><p>get请求：在server.xml中8080端口处加上URIEncoding=”UTF-8”</p>
<p>post请求：在web.xml中配置一个CharacterEncodingFilter，forceEncoding属性顺便解决了响应乱码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span></pre></td></tr></table></figure>

<p><b style="color:red">注意：这个CharacterEncodingFilter要在HiddenHttpMethodFilter之前。</b></p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="原生API-1"><a href="#原生API-1" class="headerlink" title="原生API"></a>原生API</h3><p>session,request</p>
<h3 id="3M"><a href="#3M" class="headerlink" title="3M"></a>3M</h3><p>在方法参数位置处传入<strong>Map</strong>(接口)或<strong>Model</strong>(接口)或<strong>ModelMap</strong>(类，继承LinkedHashMap)，其中的数据会被保存在request域中然后requestScope.xxx即可取出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modelTest</span><span class="params">(Model model)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    model.addAttribute(<span class="string">"talk"</span>,<span class="string">"hahahahaha"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这三个都是用BindingAwareModelMap对象来实现功能。BindingAwareModelMap的父类ExtendedModelMap继承了ModelMap并实现了Model接口。</p>
<h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>模型+视图，用这个当返回值也可以，new对象填一个String参数，也就是页面地址。然后使用方法添加数据，数据同样在request域中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mv"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">mavTest</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mv.addObject(<span class="string">"talk"</span>,<span class="string">"hahaha"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mv;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="@SessionAttributes注解"></a>@SessionAttributes注解</h3><p>加在类上，value属性指定保存数据的key，假设为test，当在request中保存key为test的数据时，会将数据同时保存到session中。value可以是数组，指定多个key。而type属性指定保存的类型，会保存所有同类型的数据。不过并不推荐使用这个注解，要用session就使用原生API。</p>
<h3 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="@ModelAttribute注解"></a>@ModelAttribute注解</h3><p>使用场景：部分更新字段时，SpringMVC的自动封装会导致没更改的字段为null。</p>
<p>标在方法上，会提前运行这个方法，查到数据库中的信息封装成对象，并放入map/model/modelmap中。告诉SpringMVC直接使用刚刚的对象，而不new对象。在方法参数前加注解即可，比如@ModelAttribute(“book”)Book book，这样就会使用这个对象。</p>
<h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><p><img src="/2020/02/28/SpringMVC%E6%83%B3%E5%90%83%E7%81%AB%E9%94%85/dispatcher.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC唉姆威西</title>
    <url>/2020/02/26/SpringMVC%E5%94%89%E5%A7%86%E5%A8%81%E8%A5%BF/</url>
    <content><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>比Spring多了web和webmvc</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="添加Tomcat"><a href="#添加Tomcat" class="headerlink" title="添加Tomcat"></a>添加Tomcat</h3><p>Edit Configuration–&gt;左上角” + “号–&gt;选择Tomcat Server–&gt;local</p>
<p>右侧server标签卡里：Application server右边配置tomcat根目录–&gt;OK</p>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"3.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--&lt;!DOCTYPE web-app PUBLIC--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--servlet-class中的值是spring-webmvc包提供的类，即前端控制器，用于控制所有请求 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--url-pattern（重点）中有3个值，分别为/、 /*、 *.action  --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h3><p>index.jsp（webapp下），success.jsp（webapp/WEB-INF/pages/success.jsp）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello"</span>&gt;</span>跳转页面到helloworld<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	System.out.println(<span class="string">"处理hello请求。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="keyword">return</span> <span class="string">"/WEB-INF/pages/success.jsp"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="点击超链接跳转成功"><a href="#点击超链接跳转成功" class="headerlink" title="点击超链接跳转成功"></a>点击超链接跳转成功</h3><h2 id="对比Spring-Boot"><a href="#对比Spring-Boot" class="headerlink" title="对比Spring Boot"></a>对比Spring Boot</h2><h3 id="选择web模块"><a href="#选择web模块" class="headerlink" title="选择web模块"></a>选择web模块</h3><h3 id="写两个页面"><a href="#写两个页面" class="headerlink" title="写两个页面"></a>写两个页面</h3><p>放在resources/static下</p>
<h3 id="配置视图控制器"><a href="#配置视图控制器" class="headerlink" title="配置视图控制器"></a>配置视图控制器</h3><p>如果用了thymeleaf就不用配了，在templates下建文件，自动带上前后缀。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/hello.html"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        registry.addViewController(<span class="string">"/world"</span>).setViewName(<span class="string">"/world.html"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="控制层Controller"><a href="#控制层Controller" class="headerlink" title="控制层Controller"></a>控制层Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HWController</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"处理Hello请求"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"/world"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>springmvc.xml里</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis逆向工程</title>
    <url>/2020/02/25/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>根据数据表逆向生成JavaBean，xxxMapper，xxxMapper.xml等</p>
<p><a href="http://mybatis.org/generator/quickstart.html" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><img src="/2020/02/25/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/prepare.png" alt></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>将配置文件直接放在项目根目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"simple"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.czw.bean"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.czw.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.czw.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"student"</span> <span class="attr">domainObjectName</span>=<span class="string">"Student"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span></pre></td></tr></table></figure>

<p>context：targetRuntime指定版本，加Simple就是简单版，不加就是复杂版</p>
<p>jdbcConnection：数据库连接配置</p>
<p>javaModelGenerator：指定生成的JavaBean所在的包</p>
<p>sqlMapGenerator：指定生成的sql映射文件所在的包</p>
<p>javaClientGenerator：指定接口所在的包</p>
<p>table：指定数据库的表名及对应的JavaBean对象名，可以用子指定字段名对应属性名</p>
<h2 id="Java方法生成"><a href="#Java方法生成" class="headerlink" title="Java方法生成"></a>Java方法生成</h2><p>随便选一个测试类，运行这段代码，将xml文件路径配好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Configuration config = cp.parseConfiguration(configFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    myBatisGenerator.generate(<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>自动生成了一个Student对象，StudentMapper接口，StudentMapper.xml文件，包含了一些简单方法</p>
<p><img src="/2020/02/25/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/simple.png" alt></p>
<h2 id="复杂版"><a href="#复杂版" class="headerlink" title="复杂版"></a>复杂版</h2><p>多了一个StudentExample对象，里面包含很多方法，以及三个类，其中两个又包含很多方法和属性。</p>
<p><img src="/2020/02/25/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/example.png" alt></p>
<p>多了很多复杂方法</p>
<p><img src="/2020/02/25/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/difficult.png" alt></p>
<p>真复杂。。。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis慨耻</title>
    <url>/2020/02/25/MyBatis%E6%85%A8%E8%80%BB/</url>
    <content><![CDATA[<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>本地缓存，SqlSession级别(或者说线程级别)的缓存，默认存在的。</p>
<h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><p>只要之前查过的数据(比如根据id查一个员工)，都会默认保存在缓存中(Map)，下次再取就直接拿(不会再发SQL语句) </p>
<a id="more"></a>

<h4 id="失效的几种情况"><a href="#失效的几种情况" class="headerlink" title="失效的几种情况"></a>失效的几种情况</h4><p>不同的SqlSession使用不同的缓存，当不同的sqlsession调用同一个方法同一个参数时，不能共享。</p>
<p>在同一个sqlsession会话中的两次查询中间有任何一次增删改操作时，就会清空缓存，重写发SQL语句。</p>
<p>openSession.clearCache()方法，手动清空缓存。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>全局范围的缓存，namespace级别，除过当前线程，SqlSession能用之外，其他也能用，默认不开启。</p>
<p>全局配置文件中setting标签里cacheEnabled属性调为true，开启全局缓存开关。</p>
<p>SQL映射文件中，写一个cache空标签即可开启该文件的二级缓存。</p>
<p>最后让bean对象实现序列化接口，就可以用了。</p>
<h3 id="cache标签属性"><a href="#cache标签属性" class="headerlink" title="cache标签属性"></a>cache标签属性</h3><p><img src="/2020/02/25/MyBatis%E6%85%A8%E8%80%BB/cache.png" alt></p>
<h3 id="查询顺序"><a href="#查询顺序" class="headerlink" title="查询顺序"></a>查询顺序</h3><p>每一个mapper有一个二级缓存，每一个sqlsession有一个一级缓存。</p>
<p>不会出现一级缓存和二级缓存有同一个数据，二级缓存是一级缓存关闭了才有数据，一级缓存只有在二级缓存没有数据才看，如果也没有就去看数据库，查出来放入一级缓存。</p>
<p>当发起一个sqlsession，调用mapper里的查询方法查询一号员工时，先查这个mapper的二级缓存，没查到数据。再查这个sqlsession的一级缓存，也没有，再查数据库。查到后，存入一级缓存中，在这个sqlsession没关闭时再查一号员工时，直接从一级缓存中取数据，如果又有一个新的sqlsession查找一号员工，也是这个顺序。当sqlsession关闭后，会将一级缓存中的数据存入二级缓存，这是如果有新的sqlsession查询一号员工，直接从二级缓存中取数据。</p>
<p>所以任何时候都是优先看二级缓存，再看一级缓存，再查数据库。</p>
<h3 id="缓存设置"><a href="#缓存设置" class="headerlink" title="缓存设置"></a>缓存设置</h3><p><img src="/2020/02/25/MyBatis%E6%85%A8%E8%80%BB/cachesetting.png" alt></p>
<h2 id="整合EHCache"><a href="#整合EHCache" class="headerlink" title="整合EHCache"></a>整合EHCache</h2><p>MyBatis开放了Cache接口</p>
<p>cache标签的type属性写ehcache包下的EhcacheCache</p>
<p>省略</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis色扣</title>
    <url>/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/</url>
    <content><![CDATA[<h2 id="SQL联合查询"><a href="#SQL联合查询" class="headerlink" title="SQL联合查询"></a>SQL联合查询</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>Person对象/表：id(Integer，主键)，name(String)，car(对象，表中为carid)</p>
<p>Car对象/表：carId(Integer，外键)，carName</p>
<p>一个PersonMapper接口，一个getPersonById(int id)方法</p>
<a id="more"></a>

<p>准备好数据</p>
<table>
<thead>
<tr>
<th>person</th>
<th>car</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/person.png" alt></td>
<td><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/car.png" alt></td>
</tr>
</tbody></table>
<h3 id="情景一：查某人以及他买的车"><a href="#情景一：查某人以及他买的车" class="headerlink" title="情景一：查某人以及他买的车"></a>情景一：查某人以及他买的车</h3><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p.id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p.name,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p.car_id car_id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    c.car_name car_name</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    person p</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> car c <span class="keyword">ON</span> p.car_id = c.car_id</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">id</span>=<span class="comment">#&#123;id&#125;</span></span></pre></td></tr></table></figure>

<p>查询结果</p>
<p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/result1.png" alt></p>
<h4 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h4><p>自定义封装规则：级联属性封装结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"pandc"</span> <span class="attr">type</span>=<span class="string">"com.czw.bean.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"car.carId"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"car.carName"</span> <span class="attr">column</span>=<span class="string">"car_name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPC</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IPersonMapper pm=ss.getMapper(IPersonMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Person person=pm.getPersonById(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="结果完美"><a href="#结果完美" class="headerlink" title="结果完美"></a>结果完美</h4><p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/javaresult1.png" alt></p>
<h4 id="细节完善"><a href="#细节完善" class="headerlink" title="细节完善"></a>细节完善</h4><p>使用MyBatis推荐的association标签封装复杂bean对象，property指定哪个元素是对象，javaType指定封装类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"car"</span> <span class="attr">javaType</span>=<span class="string">"com.czw.bean.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"carId"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"carName"</span> <span class="attr">column</span>=<span class="string">"car_name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span></pre></td></tr></table></figure>

<p>用这一段替换级联属性封装，测试同样成功</p>
<h3 id="情景二：查买某种车的那批人"><a href="#情景二：查买某种车的那批人" class="headerlink" title="情景二：查买某种车的那批人"></a>情景二：查买某种车的那批人</h3><h4 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句"></a>SQL语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	c.car_id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	c.car_name,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	p.id person_id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	p.name person_name</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	car c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	person p <span class="keyword">ON</span> c.car_id=p.car_id</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	c.car_id = <span class="comment">#&#123;id&#125;</span></span></pre></td></tr></table></figure>

<p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/result2.png" alt></p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>使用collection标签：property指定哪个元素是集合，ofType：指定集合元素类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"listperson"</span> <span class="attr">type</span>=<span class="string">"com.czw.bean.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"carId"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"carName"</span> <span class="attr">column</span>=<span class="string">"car_name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"persons"</span> <span class="attr">ofType</span>=<span class="string">"com.czw.bean.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"person_id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"person_name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="测试方法-1"><a href="#测试方法-1" class="headerlink" title="测试方法"></a>测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCP</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ICarMapper cm=ss.getMapper(ICarMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Car car= cm.getCarById(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(car);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Person&gt; persons = car.getPersons();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Person person:persons) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="结果同样完美"><a href="#结果同样完美" class="headerlink" title="结果同样完美"></a>结果同样完美</h4><p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/javaresult2.png" alt></p>
<h2 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h2><h3 id="情景一"><a href="#情景一" class="headerlink" title="情景一"></a>情景一</h3><h4 id="SQL拆分"><a href="#SQL拆分" class="headerlink" title="SQL拆分"></a>SQL拆分</h4><p>将表连接分为两个简单SQL语句查询，一个查person，一个查car，自定义封装时，在association标签里指定select的值为查car的select标签id(最好带上全类名)，指定colume为要传入的参数，这样MyBatis就会自动去查car然后封装好。</p>
<p>CarMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCarById2"</span> <span class="attr">resultType</span>=<span class="string">"com.czw.bean.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from car where car_id=#&#123;carId&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>PersonMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPersonById2"</span> <span class="attr">resultMap</span>=<span class="string">"pc2"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from person where id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"pc2"</span> <span class="attr">type</span>=<span class="string">"com.czw.bean.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"car"</span> <span class="attr">select</span>=<span class="string">"com.czw.mapper.ICarMapper.getCarById2"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr></table></figure>

<p>结果也成功了，只不过用了两句SQL。</p>
<p>这样有一个问题，就是不需要查car的时候，也会去查，这时候就要全局开启按需加载策略</p>
<h4 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启延时加载策略--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启属性按需加载策略--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span></pre></td></tr></table></figure>

<p>这样只有要用到时，才会用后置SQL的去查出信息，可以在association标签的fetchType属性设置为eager覆盖全局配置文件的懒加载，设为lazy相反</p>
<h3 id="情景二"><a href="#情景二" class="headerlink" title="情景二"></a>情景二</h3><h4 id="SQL拆分-1"><a href="#SQL拆分-1" class="headerlink" title="SQL拆分"></a>SQL拆分</h4><p>一个根据car_id查出所有person的返回List的SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPersonByCarId"</span> <span class="attr">resultType</span>=<span class="string">"com.czw.bean.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from person where car_id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>一个根据car_id查到car的SQL，后置调用上面那句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCarById22"</span> <span class="attr">resultMap</span>=<span class="string">"cp2"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from car where car_id=#&#123;carId&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"cp2"</span> <span class="attr">type</span>=<span class="string">"com.czw.bean.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"carId"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"carName"</span> <span class="attr">column</span>=<span class="string">"car_name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"persons"</span> <span class="attr">select</span>=<span class="string">"com.czw.mapper.IPersonMapper.getPersonByCarId"</span> <span class="attr">column</span>=<span class="string">"car_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr></table></figure>

<p>结局完美</p>
<h2 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h2><p>分步查询了解即可，推荐使用连接查询</p>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>简化SQL语句动态拼串</p>
<p>环境搭建</p>
<p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/if.png" alt></p>
<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>准备一个以Student对象为参数的方法，根据对象设置的属性进行动态拼接查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuBySome"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from student where</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--age不为空时，添加age&gt;=参数对象的年龄的条件--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        age &gt;= #&#123;age&#125; and</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!gender.equals('') and gender!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--gender不为空并不是空串时，添加gender=参数对象的性别的条件--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        gender = #&#123;gender&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIF</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IStudentMapper sm=ss.getMapper(IStudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Student student=<span class="keyword">new</span> Student();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//student.setAge(19);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//这句不注释就会查出加了年龄限制的数据，实现了动态查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    student.setGender(<span class="string">"男"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Student&gt; studentList = sm.getStuBySome(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Student stu:studentList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(stu);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果完美</p>
<p>注释时查到了所有性别为男的数据，不注释时查到了性别为男切年龄大于等于19的数据</p>
<h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p>上述SQL语句中，要是没有条件就会多出一个where来，要是没有最后一个条件，就会多出一个and来，所以将条件写在where标签中，并且将and写前面，MyBatis会自动去除前面的多余and，改成这样。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuBySome"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from student</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            and age &gt;= #&#123;age&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!gender.equals('') and gender!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            and gender = #&#123;gender&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>当两个条件都写了时，MyBatis去除了age条件那个and，测试成功</p>
<h3 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        age &gt;= #&#123;age&#125; and</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!gender.equals('') and gender!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        gender = #&#123;gender&#125; and</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span></pre></td></tr></table></figure>

<p>同样不写where，用这个标签的prefix属性给下面这坨整体加一个where前缀，suffixOverrides可以将多余的后缀去除，这样可以去除后面的and，还有suffix加后缀，和prefixOverrides去除多余前缀，个人觉得还不如用where+and写前面。</p>
<h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>当输入的参数是一个集合时，用这个标签</p>
<p>collection指定输入的集合名，item指定每一个元素，separator指定分隔符，open指定开始符，close指定结束符。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuByIds"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from student where id in</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IStudentMapper sm=ss.getMapper(IStudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Student&gt; studentList = sm.getStuByIds(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Student stu:studentList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(stu);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果得到了id为1和2的student，完美</p>
<h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><p>分支选择，相当于if-else</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuByChoose"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from student</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                age=#&#123;age&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"gender!=null and !gender.equals('')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                gender=#&#123;gender&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                1=1</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChoose</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IStudentMapper sm=ss.getMapper(IStudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Student student=<span class="keyword">new</span> Student();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//student.setId(1);有id查id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//student.setAge(19);有年龄查年龄</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//student.setGender("男");有性别查性别</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//都没有全查出来</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Student&gt; studentList = sm.getStuByChoose(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Student stu:studentList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(stu);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果同样完美，在这里，与if标签不同的时，choose在满足第一个when的时候就不会继续看下面的，如果都不满足，就看otherwise</p>
<h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><p>写在update里，替换原生uptade语句，与if结合使用，可以写强大的动态更新。set标签能自动去除多余的逗号，加上if标签有哪个字段就更新哪个字段。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStu"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    update student</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and !name.equals('')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            sname=#&#123;name&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null and age&gt;0"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            age=#&#123;age&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null and !gender.equals('')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            gender=#&#123;gender&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and !email.equals('')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            email=#&#123;email&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cleanup</span> SqlSession ss=sqlSessionFactory.openSession(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IStudentMapper sm=ss.getMapper(IStudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Student student=<span class="keyword">new</span> Student();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    student.setId(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    student.setAge(<span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    student.setEmail(<span class="string">"ccc@czw.com"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//student.setGender("男");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sm.updateStu(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果完美，只更新了年龄和email</p>
<h3 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h3><p><img src="/2020/02/24/MyBatis%E8%89%B2%E6%89%A3/ognl.png" alt></p>
<h3 id="bind标签"><a href="#bind标签" class="headerlink" title="bind标签"></a>bind标签</h3><p>将一个表达式的值到一个变量，不太好用</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis买拜体斯</title>
    <url>/2020/02/22/MyBatis%E4%B9%B0%E6%8B%9C%E4%BD%93%E6%96%AF/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Employee对象与employee表（id int，name String，gender int，email String）</p>
<p>IEmpMapper接口和EmpMapper.xml文件</p>
<p>mybatis-config.xml配置文件和JUnit4.13-rc-2测试</p>
<a id="more"></a>

<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>SqlSessionFactory：SqlSession的工厂，负责创建SqlSession对象</p>
<p>为了方便，定义一个SqlSessionFactory变量，用JUnit的@Before注解标注一个初始化方法，就不用每次都手动创建了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span><span class="comment">//通过这个方法拿到从配置好的xml文件中拿到SqlSessionFactory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String resource=<span class="string">"Mybatis-config.xml"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    InputStream in=Resources.getResourceAsStream(resource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>SqlSessionFactory的openSession()方法：获取和数据库的一次会话，相当于getConnection()拿到连接，返回一个SqlSession对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession ss=sqlSessionFactory.openSession();</span></pre></td></tr></table></figure>

<p>SqlSession：Sql会话，代表和数据库的一次会话</p>
<h3 id="获取接口实现"><a href="#获取接口实现" class="headerlink" title="获取接口实现"></a>获取接口实现</h3><p>SqlSession的getMapper(xxx.class)方法：拿到接口的实现，这个实现是一个MyBatis创建的代理对象</p>
<p>接下来就可以调用方法了，测试结果完美</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IEmpMapper em=ss.getMapper(IEmpMapper<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Employee emp=em.getEmpById(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(emp);</span></pre></td></tr></table></figure>

<p>注意：要记得关闭流</p>
<h3 id="提交问题"><a href="#提交问题" class="headerlink" title="提交问题"></a>提交问题</h3><p>有时候增删改可能遇到没有提交的问题，可以在调用openSession()方法的时候传一个参数true，就会变成自动提交。或者在最后手动调用ss.commit()提交</p>
<h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h2><p>各个子标签先后顺序一定不能乱。</p>
<h3 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h3><p>引入外部配置文件，resource属性表示从类路径下引用，url属性表示从磁盘或者网络路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span></pre></td></tr></table></figure>

<h3 id="settings标签-重要"><a href="#settings标签-重要" class="headerlink" title="settings标签(重要)"></a>settings标签(重要)</h3><p>对MyBatis的一些设置，可以调整MyBatis运行时的行为。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--     开启驼峰命名与下划线自定映射   --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span></pre></td></tr></table></figure>

<p>对象如果有一个属性是empName，对应的表是emp_name，可以通过这个对应。</p>
<p>还有很多配置参见官方文档<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html</a></p>
<h3 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h3><p>typeAlias子标签：为常用的类型起别名，默认是类名，不区分大小写，可以用alias属性自定义别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.study.bean.Employee"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span></pre></td></tr></table></figure>

<p>起了别名后，再mapper映射文件中就可以用别名代替全类名。</p>
<p>或者可以用package标签，批量起别名，默认类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.study.bean"</span>/&gt;</span></span></pre></td></tr></table></figure>

<p>如果要在这个基础上自定义别名，就可以在类上用@Alias注解起别名</p>
<blockquote>
<p>MyBatis已经为很多类型内置了别名</p>
</blockquote>
<h3 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h3><p>类型处理器：以合适的形式将java属性类型和数据库类型相转换，比如String—varchar</p>
<p>通过这个标签，可以自定义类型处理器，了解即可</p>
<h3 id="objectFactory标签"><a href="#objectFactory标签" class="headerlink" title="objectFactory标签"></a>objectFactory标签</h3><p>对象工厂，了解即可</p>
<h3 id="plugins插件"><a href="#plugins插件" class="headerlink" title="plugins插件"></a>plugins插件</h3><p><img src="/2020/02/22/MyBatis%E4%B9%B0%E6%8B%9C%E4%BD%93%E6%96%AF/plugins.png" alt></p>
<h3 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h3><p>配置环境，里面的每一个environment子标签表示一个环境，通过default属性指定。</p>
<p>每一个environment都需要一个事务管理器transactionManager和一个数据源dataSource，type属性可以有UNPOOLED/POOLED/JNDI,也可以自定义，实现dataSource接口即可。</p>
<p>事务管理和数据源一般都用Spring管理，了解即可。</p>
<h3 id="databaseIdProvider标签"><a href="#databaseIdProvider标签" class="headerlink" title="databaseIdProvider标签"></a>databaseIdProvider标签</h3><p>用来考虑数据库一致性的。因为MySQL和Oracle的SQL语句有些不一样</p>
<p>其中的type属性是固定的DB_VENDOR</p>
<p>里面的property子标签的name属性是数据库标识(MySQL/Oracle/…)，value是别名</p>
<p>可以将之前写的比如select语句重写一份，加上databaseId属性，值为数据库别名，当数据库为mysql时，执行mysql的那一句，为oracle时，执行oracle的那一句，都没有时，默认执行没写这个属性的那句。</p>
<h3 id="mappers标签-重要"><a href="#mappers标签-重要" class="headerlink" title="mappers标签(重要)"></a>mappers标签(重要)</h3><p>注册写好的SQL映射文件</p>
<p>里面的mapper标签的三种属性：class，resource，url。</p>
<p>resource：类路径，url：磁盘/网络路径。</p>
<p>class：接口全类名(XML文件要和接口同目录并且名字一样，这就很不爽)</p>
<p><strong>可以用注解版MyBatis</strong>：不写配置文件，直接在接口方法上标注@Select等注解，在里面写SQL语句，然后扫描即可。不过有点耦合，并且不利于写复杂SQL语句。所以简单语句标注解，复杂写XML。</p>
<p><strong>批量注册</strong>：package标签，name属性写包名，就可以批量注册那个包下的了。这样只有注解版才能注册成功，要想XML配置文件也成功，可以在resource文件夹下创建和接口同名的包，把XML文件放进去，表面上不在一起，但在编译时，java和resource会合并，就到一起去了。</p>
<blockquote>
<p>使用包扫描时，接口和XML文件同名</p>
</blockquote>
<h2 id="SQL映射文件"><a href="#SQL映射文件" class="headerlink" title="SQL映射文件"></a>SQL映射文件</h2><h3 id="可用标签"><a href="#可用标签" class="headerlink" title="可用标签"></a>可用标签</h3><h4 id="select-update-insert-delete"><a href="#select-update-insert-delete" class="headerlink" title="select/update/insert/delete"></a>select/update/insert/delete</h4><p>属性</p>
<p><img src="/2020/02/22/MyBatis%E4%B9%B0%E6%8B%9C%E4%BD%93%E6%96%AF/updateinsertdelete.png" alt></p>
<p>获取自增主键封装到对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmp"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    insert into employee(name,gender,email) values (#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></pre></td></tr></table></figure>

<p>当数据库不支持自增主键时，使用selectKy子标签，先执行一个SQL查到id+1，再赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    select max(id)+1 from employee</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="parameterMap"><a href="#parameterMap" class="headerlink" title="parameterMap"></a>parameterMap</h4><p>原本是复杂参数映射，废弃了</p>
<h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><p>参考下面自定义结果集</p>
<h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p>抽取可重用SQL，然后在增删改查语句里用include插入即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectStu"</span>&gt;</span>select * from student<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"xxx"</span> <span class="attr">resultMap</span>=<span class="string">"test"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectStu"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>where id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="cache-cache-ref"><a href="#cache-cache-ref" class="headerlink" title="cache/cache-ref"></a>cache/cache-ref</h4><p>缓存相关</p>
<h3 id="传参分析"><a href="#传参分析" class="headerlink" title="传参分析"></a>传参分析</h3><h4 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h4><p>如果是基本类型，取值#{}里随便写都行，它就取你传入的那个。</p>
<h4 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h4><p>取值#{}里写对了都不行，它不认识。因为MyBatis会将参数自动封装在一个map中，Key是参数的索引，value是参数值。觉得不爽可以自定义key，在接口方法用@Param(“id”)注解标在参数前面，这样就可以用id表示参数了。</p>
<p>Map</p>
<p>将多个参数作为value装入map传进去也是可以的，#{}里用map的key取到value就行</p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>取值直接用#{属性名}就能取到了。</p>
<p>注意：#{}里还可以添加别的东西，比如jdbcType等等，一般最多就写个jdbcType，遇到传的是null时，mysql知道，但oracle不知道null是什么类型，这时候指定一下就行。</p>
<h3 id="取值方式"><a href="#取值方式" class="headerlink" title="取值方式"></a>取值方式</h3><p><strong>#{}：</strong>使用的是参数预编译的方式，是后面设置进去的，不会出现SQL注入。</p>
<p><strong>${}：</strong>直接拼在SQL语句，高危。</p>
<p>SQL语句有些位置是不支持预编译的，如果表名也想用动态的，那就只能通过${}取到，还有order by等等。</p>
<h3 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>返回类型写集合里元素类型，MyBatis会自动封装成对象添加进List。</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>如果是查询单条记录，则会把字段名做Key，值做value</p>
<p>如果是多条数据，则key是主键，value是封装好的对象</p>
<p>要使用@MapKey(“id”)注解，作为封装好的map的key，返回类型写元素类型</p>
<h3 id="自动封装"><a href="#自动封装" class="headerlink" title="自动封装"></a>自动封装</h3><h4 id="默认封装"><a href="#默认封装" class="headerlink" title="默认封装"></a>默认封装</h4><p>列名和属性名一一对应(不区分大小写)</p>
<p>驼峰命名法与下划线对应(empName–emp_name)</p>
<p>都不对应，sql语句起别名对应属性名</p>
<h4 id="自定义结果集"><a href="#自定义结果集" class="headerlink" title="自定义结果集"></a>自定义结果集</h4><p>resultMap标签</p>
<p>type属性指定为哪个bean对象自定义封装规则</p>
<p>id子标签：指定主键列对应规则，result子标签，指定普通列对应规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"xxx.Employee"</span> <span class="attr">id</span>=<span class="string">"myEmpMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">colume</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!--colume指定为哪一列配置规则，property指定哪个属性对应这个列--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">colume</span>=<span class="string">"cName"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用resultMap指定id就可以实现自定义封装--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">resultMap</span>=<span class="string">"myEmpMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	...</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之初性本善</title>
    <url>/2020/02/21/Spring%E6%98%A5%E4%B9%8B%E5%88%9D%E6%80%A7%E6%9C%AC%E5%96%84/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用MyBatis操作数据库</p>
<p>准备好两个对象：</p>
<p>账户(Account)：id，name，money(账户余额)</p>
<p>图书(Book)：id，bookName，price，stock(库存)</p>
<a id="more"></a>

<p>几个方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//账户余额减少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spendMoney</span><span class="params">(@Param(<span class="string">"accountName"</span>)</span> String accountName, @<span class="title">Param</span><span class="params">(<span class="string">"qian"</span>)</span><span class="keyword">int</span> qian)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//通过书名找到书本对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">Book <span class="title">getBookByName</span><span class="params">(String bookName)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//更新书本库存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//业务层（两个参数，账户名+书名）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String accountName,String bookName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Book abook=bookMapper.getBookByName(bookName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//得到要买的书</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	bookMapper.updateBook(abook);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//书本减少库存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	accountMapper.spendMoney(accountName,abook.getPrice());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//账户余额减少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<blockquote>
<p>注意：MyBatis使用多参数操作数据库是，要在参数前加上@Param注解，例如这个花钱方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spendMoney</span><span class="params">(@Param(<span class="string">"accountName"</span>)</span> String accountName, @<span class="title">Param</span><span class="params">(<span class="string">"qian"</span>)</span><span class="keyword">int</span> qian)</span>;</span></pre></td></tr></table></figure>
</blockquote>
<p>测试顺利，环境搭建完成</p>
<h2 id="案列分析"><a href="#案列分析" class="headerlink" title="案列分析"></a>案列分析</h2><p>这个过程分了两个操作完成，减少库存和减少余额，但是如果中间发生了一些差错时，库存减少了，余额确没减少，这样商家就亏了，所以要把它们弄成一个整体，引入事务控制。</p>
<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h3><p>一组逻辑紧密关联的数据库操作合成的整体。</p>
<p>比如买书时，账户扣钱和书本减少库存，转账时一方扣钱另一方加钱。两者必须是一起的。</p>
<h3 id="四个关键属性"><a href="#四个关键属性" class="headerlink" title="四个关键属性"></a>四个关键属性</h3><p><strong>原子性</strong>（不可再分，要么都执行，要么都不执行），</p>
<p><strong>一致性</strong>（所有数据都处于满足业务规则的一致性状态，只能由一个一致的状态到另一个一致的状态，一旦某个操作失败就回滚到没执行前的状态），</p>
<p><strong>隔离性</strong>（多个事务并发执行不会互相干扰），</p>
<p><strong>持久性</strong>（对数据的修改会永久保存）。</p>
<h3 id="原生编程式事务"><a href="#原生编程式事务" class="headerlink" title="原生编程式事务"></a>原生编程式事务</h3><p><img src="/2020/02/21/Spring%E6%98%A5%E4%B9%8B%E5%88%9D%E6%80%A7%E6%9C%AC%E5%96%84/yuansheng.png" alt></p>
<h3 id="Spring事务控制"><a href="#Spring事务控制" class="headerlink" title="Spring事务控制"></a>Spring事务控制</h3><p>只需要告诉Spring哪个方法是事务方法，Spring就会自动进行事务控制。</p>
<p>根据框架不同使用不同的管理器，MyBatis使用DataSourceTransactionManager</p>
<p><strong>在这之前，由于这是基于切面的，所以要导入切面相关依赖。</strong></p>
<h4 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h4><p>让它控制住数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="开启基于注解的事务控制模式"><a href="#开启基于注解的事务控制模式" class="headerlink" title="开启基于注解的事务控制模式"></a>开启基于注解的事务控制模式</h4><p>导入tx名称空间，在这里又学到了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx="http://www.springframework.org/schema/tx"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加了这一句后，还要在xsi:schemaLocation加上同一句和/spring-xxx.xsd--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/tx</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span></pre></td></tr></table></figure>

<p>这里的属性与刚刚的id对应</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="给事务方法加注解"><a href="#给事务方法加注解" class="headerlink" title="给事务方法加注解"></a>给事务方法加注解</h4><p>用@Transactional注解</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>先弄一个产生异常的语句加载两个数据库操作中间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String accountName,String bookName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book abook=bookMapper.getBookByName(bookName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//得到要买的书</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bookMapper.updateBook(abook);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//书本减少库存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> x=<span class="number">5</span>/<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//造成异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    accountMapper.spendMoney(accountName,abook.getPrice());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//账户余额减少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"结账完成"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>没加注解时，运行抛出异常，发现库存减少了，账户余额并没有减少</p>
<p>加了注解后，同样抛出异常，但是库存也没减少，余额也没减少，很成功。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="注解属性解析"><a href="#注解属性解析" class="headerlink" title="注解属性解析"></a>注解属性解析</h3><p><strong>readOnly(boolean)</strong>：设置事务为只读事务，可以进行事务优化，如果操作都是只读数据库，调成true可以省去一些操作，比如加锁，加快查询速度。默认false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)<span class="comment">//该事务只能对数据库进行读取操作</span></span></pre></td></tr></table></figure>

<p><strong>timeout(int)</strong>：超时自动终止并回滚，以秒为单位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(timeout=<span class="number">3</span>)<span class="comment">//如果3秒内不能执行完就GG</span></span></pre></td></tr></table></figure>

<blockquote>
<p>运行时异常默认都回滚，比如数学运算异常(数字除以0)，编译时异常默认不会滚，比如IO异常，读取文件不到。如果在完成数据库操作后发生编译时异常，数据操作已经执行了。</p>
</blockquote>
<p><strong>noRollbackFor(Class[])</strong>：指定哪些异常事务可以不回滚，可以让原本回滚的异常不再回滚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(noRollbackFor=&#123;NullPointerExceptioin<span class="class">.<span class="keyword">class</span>,<span class="title">xxx</span>.<span class="title">class</span>&#125;)</span></span></pre></td></tr></table></figure>

<p><strong>noRollbackForClassName(String[])</strong>：上述异常的String类型全类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(noRollbackForClassName=&#123;<span class="string">"java.lang.xxxException"</span>,<span class="string">"xxx"</span>&#125;)</span></pre></td></tr></table></figure>

<p><strong>rollbackFor(Class[])</strong>：指定哪些异常需要回滚，让不回滚的异常回滚，用法与上面相反</p>
<p><strong>rollbackForClassName(String[])</strong>：上述异常的String类型全类名</p>
<p><strong>isolation(Isolation)</strong>：调整事务隔离级别</p>
<p>几个概念：</p>
<blockquote>
<p>脏读：事务A将20改为30，事务B读取到30，事务A回滚，此时30这个数据就是脏数据</p>
<p>不可重复读：事务A读取数据20，事务B修改为30，事务A再读取到了30，两次不一致</p>
<p>幻读：事务A读取到信息10条，事务B插入了10条，事务A再读成了20条，信息多了</p>
</blockquote>
<p>隔离级别：不同级别应对不同现象</p>
<blockquote>
<p>读未提交：允许事务B读取事务A未提交的数据，—以上都可能产生</p>
<p>读以提交：要求事务B只能读取事务A以提交的数据，—避免脏读，但产生另外两种</p>
<p>可重复读：在读取数据期间，不可修改数据，—避免不可重复读和脏读(实际上MySql这个级别能避免幻读)</p>
<p>串行化：变成单线程，啥都能避免，—但没啥用了，事务排队一万年</p>
</blockquote>
<p><strong>propagation(Propagation)</strong>：指定事务传播行为，事务传播+事务行为</p>
<p>如果多个事务嵌套运行，子事务是否和父事务共用一个事务。比如：ta，tb，tc都是事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Service&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tb()&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tc()&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Test&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//注入Service s</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ta()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.tb()&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.tc()&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当tc回滚时，tb，ta要不要回滚。怎么控制就靠传播行为控制</p>
<p><img src="/2020/02/21/Spring%E6%98%A5%E4%B9%8B%E5%88%9D%E6%80%A7%E6%9C%AC%E5%96%84/chuanbo.png" alt></p>
<p>REQUIRED在当前事务里执行自己，如果当前没有，则开新事务。REQUIRED_NEW必定会挂起当前事务，开新事务执行自己。</p>
<p>不管后面怎么异常，之前已经执行的带有REQUIRED_NEW不会回滚，而REQUIRED会受到影响。当REQUIRED_NEW中的异常没有捕获被抛出时，会影响到父事务。</p>
<p>当属性为REQUIRED时，其他属性都跟父事务一样，在子事务上调整不起作用。</p>
<p>REQUIRED：将之前事务的connection传递给这个方法使用</p>
<p>REQUIRED_NEW：创建新的connection</p>
<p>本类方法的嵌套调用，就会看作一个事务，比如C事务调用了本类的A,B事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Service&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a()&#123;&#125;<span class="comment">//A事务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    b()&#123;&#125;<span class="comment">//B事务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c()&#123;<span class="comment">//C事务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        a();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="基于XML事务控制"><a href="#基于XML事务控制" class="headerlink" title="基于XML事务控制"></a>基于XML事务控制</h2><h3 id="配置事务管理器一样，导入名称空间一样。"><a href="#配置事务管理器一样，导入名称空间一样。" class="headerlink" title="配置事务管理器一样，导入名称空间一样。"></a>配置事务管理器一样，导入名称空间一样。</h3><h3 id="告诉Spring哪些是事务方法"><a href="#告诉Spring哪些是事务方法" class="headerlink" title="告诉Spring哪些是事务方法"></a>告诉Spring哪些是事务方法</h3><p>让事务切面按照定义的切入点表达式去切入事务方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(xxx)"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--用表达式指定要切入的方法--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--指定事务管理器--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--指明哪些方法是事务方法--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">timeout</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--具体哪个方法，所有的参数都可以配置，这里以timeout为例--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--所有方法--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--get开头的方法--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之虐我千百遍</title>
    <url>/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E8%99%90%E6%88%91%E5%8D%83%E7%99%BE%E9%81%8D/</url>
    <content><![CDATA[<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>当需要为一个程序添加日志记录时，比如要记录下面方法的输入输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;<span class="comment">//计算器对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;<span class="comment">//加法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(i+<span class="string">","</span>+j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> result=i+j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"结果："</span>+result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Calculator cal=<span class="keyword">new</span> Calculator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	cal.add(<span class="number">2</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>假装以sout()来记录，这样的代码将日志记录与业务逻辑写在一起，耦合度太高，而且，当方法很多时，要一个一个加记录，很不方便，所以使用动态代理的方式来解决这一问题。</p>
<a id="more"></a>

<h2 id="动态代理-JDK"><a href="#动态代理-JDK" class="headerlink" title="动态代理(JDK)"></a>动态代理(JDK)</h2><p>newProxyInstance()创建动态代理对象</p>
<p>新建一个代理对象CalculatorProxy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> Calculator calculator)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader classLoader=calculator.getClass().getClassLoader();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//被代理对象的类加载器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class&lt;?&gt;[] interfaces=calculator.getClass().getInterfaces();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//被代理对象实现的接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        InvocationHandler h=<span class="keyword">new</span> InvocationHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//方法执行器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//proxy：代理对象，千万别动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//method：目标对象的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//args：方法调用时传的参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//利用反射执行目标方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object result = method.invoke(calculator, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//目标方法执行完的返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object proxyInstance = Proxy.newProxyInstance(classLoader, interfaces, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (Calculator) proxyInstance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>接着可以修改test方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Calculator cal=<span class="keyword">new</span> Calculator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Calculator proxy= CalculatorProxy.getProxy(cal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy.add(<span class="number">3</span>,<span class="number">3</span>);<span class="comment">//代理对象执行方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy.sub(<span class="number">2</span>,<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后要做日志记录就可以在代理对象里面做，比如Object result = method.invoke(calculator, args);的重要位置加上详细记录：</p>
<p>方法执行前，方法正常执行完，方法抛出异常，方法最终结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object result = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(method.getName()+<span class="string">"方法开始执行，参数列表为："</span>+ Arrays.toString(args));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = method.invoke(calculator, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(method.getName()+<span class="string">"方法正常执行完毕，结果为："</span>+ result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(method.getName()+<span class="string">"方法执行抛出异常"</span>+e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(method.getName()+<span class="string">"方法最终执行结束"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E8%99%90%E6%88%91%E5%8D%83%E7%99%BE%E9%81%8D/add.png" alt></p>
<p>在做了动态代理之后，很好的完成了解耦。</p>
<p>最后：可以用一个工具类来做日志记录，配置4个方法对应四个需要做日志记录的地方，将sout()替换成四个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单独抽出一个工具类专门做日志记录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Method method,Object... args)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(method.getName()+<span class="string">"方法开始执行，参数列表为："</span>+ Arrays.toString(args));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Method method,Object result)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(method.getName()+<span class="string">"方法正常执行完毕，结果为："</span>+ result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Method method,Exception e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(method.getName()+<span class="string">"方法执行抛出异常"</span>+e.getCause());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(Method method)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(method.getName()+<span class="string">"方法最终执行结束"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//修改代理对象执行方法的日志记录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	LogUtil.start(method,args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	result = method.invoke(calculator, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	LogUtil.stop(method,result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	LogUtil.exception(method,e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	LogUtil.end(method);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="产生的问题"><a href="#产生的问题" class="headerlink" title="产生的问题"></a>产生的问题</h2><h3 id="写起来麻烦"><a href="#写起来麻烦" class="headerlink" title="写起来麻烦"></a>写起来麻烦</h3><p>是真的麻烦。</p>
<h3 id="对象必须实现接口"><a href="#对象必须实现接口" class="headerlink" title="对象必须实现接口"></a>对象必须实现接口</h3><p>如果对象没有实现任何接口，则无法创建代理对象。</p>
<p>代理对象和被代理对象唯一的关联就是视线里同样的接口。</p>
<h3 id="所以Spring实现了AOP"><a href="#所以Spring实现了AOP" class="headerlink" title="所以Spring实现了AOP"></a>所以Spring实现了AOP</h3><p>一行代码都不写创建动态代理，不要求代理对象实现接口。</p>
<h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h2><p>程序运行期间，将某段代码动态切入到指定方法的指定位置并运行。</p>
<h3 id="一些概念："><a href="#一些概念：" class="headerlink" title="一些概念："></a>一些概念：</h3><p>以计算器日志为例。</p>
<p>计算器的计算方法四个日志记录点，称之为<strong>横切关注点</strong>；</p>
<p>在记录点做记录的方法，称之为<strong>通知方法</strong>；</p>
<p>通知方法属于<strong>切面类</strong>；</p>
<p>每一个方法所有的记录点统称为<strong>连接点</strong>；</p>
<p>有的点位不需要做记录，比如加减法的异常点，不会抛出异常；有的点位需要做记录，比如除法里除数为0会抛出异常，所以在方法执行抛出异常点，这样需要做记录的点位称之为<strong>切入点</strong>；</p>
<p>通过什么方法判定一个点位是不是切入点，这样的方法称之为<strong>切入点表达式</strong></p>
<h3 id="导坐标"><a href="#导坐标" class="headerlink" title="导坐标"></a>导坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="存入IoC容器"><a href="#存入IoC容器" class="headerlink" title="存入IoC容器"></a>存入IoC容器</h3><p>给目标类和切面类加上@Component注解</p>
<p>给切面类加上@Aspect注解</p>
<h3 id="托付给Spring"><a href="#托付给Spring" class="headerlink" title="托付给Spring"></a>托付给Spring</h3><p>告知Spring，每个方法在何时何地运行</p>
<p><strong>几个注解</strong></p>
<p>@Before：前置通知，方法运行前</p>
<p>@AfterReturning：返回通知，方法正常返回之后</p>
<p>@AfterThrowing：异常通知，方法抛出异常之后</p>
<p>@After：后置通知，方法最终结束</p>
<p>@Around：环绕通知，</p>
<p>以@Before为例：</p>
<p>@Before(“execution(访问修饰符 返回值类型 方法签名)”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(public int com.czw.bean.impl.MyCalculator.add(int,int))"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//将add改成*表示该类下同修饰符，同返回值，同参数列表的所有方法</span></span></pre></td></tr></table></figure>

<h3 id="开启基于注解的AOP"><a href="#开启基于注解的AOP" class="headerlink" title="开启基于注解的AOP"></a>开启基于注解的AOP</h3><p>导入aop名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:aop="http://www.springframework.org/schema/aop"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将下面两句加入xsi:schemaLocation--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/aop</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd</span></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ICalculator myCalculator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//注入bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	myCalculator.add(<span class="number">2</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果完美</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>aop底层就是动态代理，保存在容器中的是代理对象</p>
<h3 id="1-lt-对象类型"><a href="#1-lt-对象类型" class="headerlink" title="1&lt;对象类型"></a>1&lt;对象类型</h3><p><img src="/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E8%99%90%E6%88%91%E5%8D%83%E7%99%BE%E9%81%8D/detail_1.png" alt></p>
<p>表面看起来是注入的bean对象，实际类型是代理对象类型。</p>
<h3 id="2-lt-不用实现接口"><a href="#2-lt-不用实现接口" class="headerlink" title="2&lt;不用实现接口"></a>2&lt;不用实现接口</h3><p>MyCalculator没有实现Calculator接口，也可以做到动态代理，容器中的类型就是本类型，cglib会创建实现类所有方法的内部类，最后还是一个代理对象。</p>
<h3 id="3-lt-切入点表达式写法"><a href="#3-lt-切入点表达式写法" class="headerlink" title="3&lt;切入点表达式写法"></a>3&lt;切入点表达式写法</h3><p>execution(访问修饰符  返回值类型  方法全类名(参数列表))</p>
<p><code>execution(public int com.czw.bean.impl.MyCalculator.add(int,int))</code></p>
<p>这是最精确的表示，还可以使用通配符模糊匹配</p>
<p><strong>“  *  ”</strong> ：匹配一个或多个字符/任意一个参数/任何类型返回值</p>
<p><code>execution(public * com.*.bean.impl.MyCal*.*(int,*))</code></p>
<blockquote>
<p>任意修饰符不能用*表示，不写就是任意修饰符(好像只要public可以选)</p>
<p>如果只有一个*，那就是代表整个工程下所有类所有方法</p>
</blockquote>
<p><code>execution(* *(..))</code> ：这个就是全方位封锁打击</p>
<p><strong>“   ..  “</strong> ：匹配任意多个任意类型参数/任意多层路径</p>
<p><code>execution(public int com..MyCal*.*(..))</code></p>
<p>**”  &amp;&amp; 、||、!  “ **：同时满足，满足任意，不满足</p>
<h3 id="4-lt-通知方法执行顺序"><a href="#4-lt-通知方法执行顺序" class="headerlink" title="4&lt;通知方法执行顺序"></a>4&lt;通知方法执行顺序</h3><p><strong>正常执行时：</strong>@Before–&gt;@After–&gt;@AfterReturning</p>
<p><strong>异常执行时：</strong> @Before–&gt;@After–&gt;@AfterThrowing</p>
<h3 id="5-lt-获取方法详细信息"><a href="#5-lt-获取方法详细信息" class="headerlink" title="5&lt;获取方法详细信息"></a>5&lt;获取方法详细信息</h3><p>在通知方法参数上写一个JoinPoint，表示方法详细信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(public int com.czw.bean.impl.MyCalculator.*(int,int))"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object[] args = joinPoint.getArgs();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获取输入参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Signature signature = joinPoint.getSignature();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//signature表示方法前面，和execution里内容一样，包括修饰符、返回值、全类名、方法名、参数列表。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(signature.getName()+<span class="string">"方法开始执行，参数列表为："</span>+ Arrays.toString(args));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//System.out.println("方法开始执行前");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//获取方法返回值,用通知注解的returning属性可以指定参数列表里的参数为返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value=<span class="string">"execution(xxx)"</span>,returning=<span class="string">"result"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Signature signature = joinPoint.getSignature();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(signature.getName()+<span class="string">"方法正常执行完毕，结果为："</span>+ result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//System.out.println("方法正常执行完成");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//异常同理用throwing指定</span></span></pre></td></tr></table></figure>

<h3 id="6-lt-Spring对通知方法不严格"><a href="#6-lt-Spring对通知方法不严格" class="headerlink" title="6&lt;Spring对通知方法不严格"></a>6&lt;Spring对通知方法不严格</h3><p>唯一要求就是方法的参数列表不能乱写，通知方法是Spring利用反射调用，所以参数列表必须明确，要让Spring知道是什么。接受异常和返回值范围要写大。</p>
<h3 id="7-lt-抽取可重用切入点表达式"><a href="#7-lt-抽取可重用切入点表达式" class="headerlink" title="7&lt;抽取可重用切入点表达式"></a>7&lt;抽取可重用切入点表达式</h3><p>先声明一个没有实现的void空方法，加上@Pointcut注解，加上表达式，其他用到表达式的地方用方法名代替即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(xxx)"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"point()"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ...&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="8-lt-环绕通知"><a href="#8-lt-环绕通知" class="headerlink" title="8&lt;环绕通知"></a>8&lt;环绕通知</h3><p>Spring中最强大的通知，基本就是动态代理，等于其他四合一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"point()"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//pjp是JoinPoint的子接口，继承了所有方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object[] args = pjp.getArgs();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name = pjp.getSignature().getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object proceed = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Around-Before:"</span>+name+<span class="string">"方法开始执行，参数为"</span>+Arrays.toString(args));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proceed = pjp.proceed(args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//这一句直接就是method.invoke(obj,args);要加通知在这句周围加就行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Around:-AfterReturning"</span>+name+<span class="string">"方法正常执行完毕,返回值："</span>+proceed);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Around:-AfterThrowing"</span>+name+<span class="string">"方法抛出异常,异常原因："</span>+e.getCause());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Around-After:"</span>+name+<span class="string">"方法最终执行结束"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> proceed;<span class="comment">//这个直接就是方法返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E8%99%90%E6%88%91%E5%8D%83%E7%99%BE%E9%81%8D/around.png" alt></p>
<p>十分顺利，并且顺序是正确的。</p>
<h3 id="9-lt-环绕通知与其他共存时"><a href="#9-lt-环绕通知与其他共存时" class="headerlink" title="9&lt;环绕通知与其他共存时"></a>9&lt;环绕通知与其他共存时</h3><p>环绕通知执行顺序优先其他通知</p>
<p>环绕前置&amp;普通前置–&gt;目标方法–&gt;环绕返回/异常–&gt;环绕后置–&gt;普通返回/异常–&gt;普通后置</p>
<blockquote>
<p>注意：出现异常时，环绕通知要把异常抛出去，不然普通通知就捕捉不到异常了</p>
</blockquote>
<h3 id="10-lt-多切面执行顺序"><a href="#10-lt-多切面执行顺序" class="headerlink" title="10&lt;多切面执行顺序"></a>10&lt;多切面执行顺序</h3><p>没有环绕通知时，类似于层层包装，从一端到令一端，中间是目标方法，先执行切面A的前置，然后切面B前置，然后目标方法，然后切面B正常/异常，后置，然后切面A…具体哪个在外边由切面类首字母排序A最外面，Z最里面。</p>
<blockquote>
<p>@Order注解加上一个int类型值，可以指定优先级，越小越优先，在最外层</p>
</blockquote>
<p>当外切面加了环绕通知时，也只是在当前切面位置  贴着内切面，而不是贴着目标方法。</p>
<h2 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h2><p>日志记录，权限验证，事务控ZHI</p>
<h2 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><h3 id="加入容器"><a href="#加入容器" class="headerlink" title="加入容器"></a>加入容器</h3><p>用bean标签配上id和class(切面类+目标类)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"LogUtil"</span> <span class="attr">class</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MyCalculator"</span> <span class="attr">class</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<blockquote>
<p>相当于加上@Component注解</p>
</blockquote>
<h3 id="告知Spring切面类"><a href="#告知Spring切面类" class="headerlink" title="告知Spring切面类"></a>告知Spring切面类</h3><p>使用aop名称空间指定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"LogUtil"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></pre></td></tr></table></figure>

<blockquote>
<p>相当于加上@Aspect注解</p>
</blockquote>
<h3 id="配置运行时间和位置"><a href="#配置运行时间和位置" class="headerlink" title="配置运行时间和位置"></a>配置运行时间和位置</h3><p>加入到&lt; aop:config &gt;标签的&lt; aop:aspect &gt;中，aspect标签也有order属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"mypoint"</span> <span class="attr">expression</span>=<span class="string">"execution(xxx)"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明在aspect标签里直供本切面使用，要想所有切面使用，可以声明在config标签里--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"start"</span> <span class="attr">pointcut</span>=<span class="string">"execution(xxx)"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接写表达式--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:afterreturning</span> <span class="attr">method</span>=<span class="string">"stop"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用抽取出来的表达式,并指定返回值/异常对应方法的参数--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:afterthrowing</span> <span class="attr">method</span>=<span class="string">"exception"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">throwing</span>=<span class="string">"exception"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"end"</span> <span class="attr">pointcut</span>=<span class="string">"execution(xxx)"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> /&gt;</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意：在XML配置文件中，配置的顺序决定了通知的顺序，先配的切面在外层，后配的切面在里层。并且，切面中环绕如果先配，环绕前置在前面，环绕如果后配，普通前置在前面。</p>
</blockquote>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>注解：快速方便</p>
<p>XML：功能完善</p>
<p>重要的用配置，不重要的用XML</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之又邂逅</title>
    <url>/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E5%8F%88%E9%82%82%E9%80%85/</url>
    <content><![CDATA[<h2 id="配置类代替applicationContext"><a href="#配置类代替applicationContext" class="headerlink" title="配置类代替applicationContext"></a>配置类代替applicationContext</h2><h3 id="用到的注解"><a href="#用到的注解" class="headerlink" title="用到的注解"></a>用到的注解</h3><p>@Configuration：指定当前类为配置类。</p>
<p>注意：当配置类作为AnnotationConfigApplicationContext创建的参数时，该注解可以不加，不作为参数的时候要加上。</p>
<a id="more"></a>

<p>@ComponentScan：指定要扫描的包。</p>
<p>注意：扫描包时，先看类上有没有注解，没有就不会继续扫描该类。</p>
<p>@Bean：标注在方法上，表示将方法返回值存入IoC容器，name属性指定beanid，默认值为方法名。</p>
<p>使用注解配置方法时，如果方法有参数，spring会去容器中查找是否有可用bean对象，原理和Autowired一样。</p>
<p>@Scope：单例/多例</p>
<p>@Import(xxx.class)：导入其他配置类</p>
<p>@PropertySource：指定properties文件位置</p>
<h3 id="新建配置类SpringConfiguration"><a href="#新建配置类SpringConfiguration" class="headerlink" title="新建配置类SpringConfiguration"></a>新建配置类SpringConfiguration</h3><p>在类上标明@Configuration注解表示这是一个配置类</p>
<p>同时标明@ComponentScan(“com.czw”)指定要扫描的包，等同于</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>这一段在配置类中的体现为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)<span class="comment">//给bean对象命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">createDDS</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DruidDataSource dds=<span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dds.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/learningssm?serverTimezone=UTC"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dds.setUsername(<span class="string">"root"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dds.setPassword(<span class="string">"root"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> dds;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>new一个DataSource实现类，DruidDataSource的父类DruidAbstractDataSource实现了这一接口。set方法对应了property标签，所以用set方法赋值，然后返回，返回值将作为bean对象注入IoC容器。</p>
<h3 id="SqlSessionFactoryBean"><a href="#SqlSessionFactoryBean" class="headerlink" title="SqlSessionFactoryBean"></a>SqlSessionFactoryBean</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>同样使用刚刚的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"sqlSessionFactoryBean"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">createSSFB</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ApplicationContext ac= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSessionFactoryBean ssfb=<span class="keyword">new</span> SqlSessionFactoryBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ssfb.setDataSource(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Resource[] mapper=ac.getResources(<span class="string">"classpath:mapper/*.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Resource mybatis=ac.getResource(<span class="string">"classpath:mybatis-config.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ssfb.setConfigLocation(mybatis);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ssfb.setMapperLocations(mapper);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ssfb;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在这里要注意的是，这里有一个参数dataSource，spring会在IoC容器中找对应的bean，就是刚刚配的dataSource，然后ConfigLocation需要一个Resource类型的参数，而MapperLocations需要一个Resources[]类型的参数，这里先获取IoC容器，调用其中的getResource和getResources方法获取，get方法的参数对应property标签的value，即类路径。</p>
<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.czw.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>同上，不过介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">createMSC</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    MapperScannerConfigurer msc=<span class="keyword">new</span> MapperScannerConfigurer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    msc.setBasePackage(<span class="string">"com.czw.mapper"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> msc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="最后的替换"><a href="#最后的替换" class="headerlink" title="最后的替换"></a>最后的替换</h3><p>xml配置文件使用的是ClassPathXmlApplicationContext来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr></table></figure>

<p>配置类需要使用AnnotationConfigApplicationContext，参数为配置类.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>单独拿出数据库连接的参数，将参数用键值对形式保存至xxx.properties文件，在配置类上添加@PropertySource(“classpath:xxx.properties”)，然后添加几个变量分别用@value(“${key}”)绑定好，然后就可以用变量替换方法里的字符串。</p>
<blockquote>
<p>我试了，取出来为null，GG</p>
</blockquote>
<h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p><img src="/2020/02/19/Spring%E6%98%A5%E4%B9%8B%E5%8F%88%E9%82%82%E9%80%85/junit.png" alt></p>
<p>导入spring-test</p>
<p>使用junit的@Runwith注解让spring接管test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr></table></figure>

<p>使用@ContextConfiguration注解告知spring的IoC创建是xml还是注解</p>
<p>loactions指定xml文件位置，classes指定配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(classes = SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span></pre></td></tr></table></figure>

<p>然后就可以用@Autowired注入了</p>
<blockquote>
<p>注意：要求Junit版本为4.12以上，而且貌似junit5里面@Runwith换成@ExtendWith(StoryExtension.class)</p>
</blockquote>
<h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合MyBatis</title>
    <url>/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<h2 id="血与泪的教训"><a href="#血与泪的教训" class="headerlink" title="血与泪的教训"></a>血与泪的教训</h2><p><b style="color:red">之前少导了个依赖</b>        <b style="color:blue">spring-orm</b></p>
<a id="more"></a>

<h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><h3 id="开启注解支持"><a href="#开启注解支持" class="headerlink" title="开启注解支持"></a>开启注解支持</h3><p>spring配置文件中加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="一个接口"><a href="#一个接口" class="headerlink" title="一个接口"></a>一个接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getFirst</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="一个业务层"><a href="#一个业务层" class="headerlink" title="一个业务层"></a>一个业务层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> IAccountMapper accountMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//自动注入接口实现</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> accountMapper.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="一张表"><a href="#一张表" class="headerlink" title="一张表"></a>一张表</h3><p><img src="/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/User_tb.png" alt></p>
<h3 id="一个对应接口的xml文件"><a href="#一个对应接口的xml文件" class="headerlink" title="一个对应接口的xml文件"></a>一个对应接口的xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.czw.mapper.IAccountMapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--名称空间和接口全类名对应--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getFirst"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--方法也要对应方法名--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select username from user where user_id=1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="再续前缘"><a href="#再续前缘" class="headerlink" title="再续前缘"></a>再续前缘</h2><h3 id="首先，导好坐标"><a href="#首先，导好坐标" class="headerlink" title="首先，导好坐标"></a>首先，导好坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringLearning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--mysql驱动--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--spring核心之一--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--mybatis核心--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--数据源--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--MyBatis整合Spring核心--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--忘了干嘛的--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--spring对ORM框架的支持--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="然后，准备数据库连接"><a href="#然后，准备数据库连接" class="headerlink" title="然后，准备数据库连接"></a>然后，准备数据库连接</h3><p>准备外置database.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/learningssm?serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">password</span>=<span class="string">root</span></span></pre></td></tr></table></figure>

<p>在spring配置文件中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="最后，整合MyBatis"><a href="#最后，整合MyBatis" class="headerlink" title="最后，整合MyBatis"></a>最后，整合MyBatis</h3><p>在spring配置文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  根据配置文件得到SqlSessionFactory  --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  将接口实现注入IoC容器  --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.czw.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ApplicationContext ac= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//拿到IOC容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    IAccountService as= ac.getBean(<span class="string">"accountServiceImpl"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//拿到业务层对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(as);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(as.getFirst());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//调用方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/result.png" alt></p>
<p>NICE啊，舒服了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>Spring</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合MyBatis</title>
    <url>/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<h2 id="我真菜"><a href="#我真菜" class="headerlink" title="我真菜"></a>我真菜</h2><h3 id="被Spring整合MyBatis打击到了，所以转向Spring-Boot"><a href="#被Spring整合MyBatis打击到了，所以转向Spring-Boot" class="headerlink" title="被Spring整合MyBatis打击到了，所以转向Spring Boot"></a>被Spring整合MyBatis打击到了，所以转向Spring Boot</h3><p>我太菜了！！！</p>
<a id="more"></a>

<h2 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h2><p>一个User对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>		<span class="comment">//lombok插件简单粗暴</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String username;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String password;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>一张User表</p>
<p><img src="/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/User_tb.png" alt></p>
<p>字段名和属性名对应</p>
<h2 id="接口处理"><a href="#接口处理" class="headerlink" title="接口处理"></a>接口处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getFirst</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>启动类上开启扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.czw.springbootmybatis.mapper"</span>)</span></pre></td></tr></table></figure>

<p>XML文件编写SQL语句并映射到接口(mapper标签的namespace)且对应接口方法名(id)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.czw.springbootmybatis.mapper.IUserMapper"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;select id=<span class="string">"getFirst"</span> resultType=<span class="string">"String"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        select username from user where user_id = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;select id=<span class="string">"getById"</span> resultType=<span class="string">"com.czw.springbootmybatis.bean.User"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user where user_id = #&#123;userId&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/mapper&gt;</span></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/learningssm?serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#映射xml文件并实现下划线和大写转化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span></pre></td></tr></table></figure>

<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span><span class="comment">//存入IoC容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//自动注入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userMapper.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//调用方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userMapper.getById(id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//注入Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str=userService.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    User user=userService.getById(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(user.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>可想而知</p>
<p><img src="/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/result.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-0，舒服了，Spring Boot真好</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之再相会</title>
    <url>/2020/02/18/Spring%E6%98%A5%E4%B9%8B%E5%86%8D%E7%9B%B8%E4%BC%9A/</url>
    <content><![CDATA[<h2 id="基于注解的IOC"><a href="#基于注解的IOC" class="headerlink" title="基于注解的IOC"></a>基于注解的IOC</h2><blockquote>
<p>前提：加上名称空间(xmlns:context)，开启注解扫描</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="ioc常用注解"><a href="#ioc常用注解" class="headerlink" title="ioc常用注解"></a>ioc常用注解</h3><h4 id="用于创建对象"><a href="#用于创建对象" class="headerlink" title="用于创建对象"></a>用于创建对象</h4><p>和bean标签功能一样</p>
<p>@component(value=”xxx”)：将对象存入spring容器，value属性表示bean的id，不写时默认类名(首字母小写)，只有一个value属性，可以不写value=。</p>
<p>子集：@Controller：表现层，@Service：业务层，@Repository：持久层</p>
<h4 id="用于注入数据"><a href="#用于注入数据" class="headerlink" title="用于注入数据"></a>用于注入数据</h4><p>和property标签功能一样</p>
<p>@Autowired：自动按照类型注入，根据变量类型找容器中对应的bean对象，如果是接口，则可以找实现类，只要容器中有唯一的bean对象和要注入的对象类型匹配，就可以注入。出现位置可以是变量，也可以是方法上。</p>
<blockquote>
<p>如果有多个bean满足类型时，先按照类型筛选，然后根据变量名确定，如果没有相同变量名，则报错。</p>
</blockquote>
<p>使用注解注入时，set方法就可以不用了。</p>
<p>@Qualifier：按照类型注入的基础上，再按照名称注入，在给类成员注入时，不能单独使用，在给方法参数注入时可以。</p>
<p>@Resource：直接按照bean的id注入，不依靠Autowired，name属性对应id。</p>
<blockquote>
<p>以上都只能注入其他bean类型，无法注入基本类型/String类型，集合类型只能通过xml。</p>
</blockquote>
<p>@Value：用于注入基本类型/String，value属性用于指定数值，可以使用SpEL表达式( ${表达式} )</p>
<h4 id="用于改变作用范围"><a href="#用于改变作用范围" class="headerlink" title="用于改变作用范围"></a>用于改变作用范围</h4><p>和scope属性功能一样</p>
<p>@Scope：用于指定bean作用范围，value属性表示取值，常用：单例(默认)/多例</p>
<h4 id="和生命周期相关"><a href="#和生命周期相关" class="headerlink" title="和生命周期相关"></a>和生命周期相关</h4><p>和init-method/destroy-method属性功能一样</p>
<p>@PreDestroy：指定销毁方法</p>
<p>@PostConstruct：指定初始化方法</p>
<h2 id="IOC案列"><a href="#IOC案列" class="headerlink" title="IOC案列"></a>IOC案列</h2><p>使用xml和注解实现单表CRUD</p>
<p>死在mybatis整合。。。</p>
<p>去学mybatis去了</p>
<h2 id="使用纯注解实现"><a href="#使用纯注解实现" class="headerlink" title="使用纯注解实现"></a>使用纯注解实现</h2><p>暂无</p>
<h2 id="Spring和Junit整合"><a href="#Spring和Junit整合" class="headerlink" title="Spring和Junit整合"></a>Spring和Junit整合</h2><p>暂无</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-2</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之初体验</title>
    <url>/2020/02/17/Spring%E6%98%A5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p>工厂模式+反射+配置文件</p>
<p>bean.properties配置文件</p>
<p>Beanfactory工厂类</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beanfactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化properties实例，用于装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//配置文件为beanName=beanPath的形式，beanPath为全限定类名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//静态代码块装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            InputStream is=Beanfactory.class.getResourceAsStream("bean.properties");</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//获取到resources文件夹下的bean.properties配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            prop.load(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过输入流获取配置文件加载到properties实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//通过方法获取beanName对应的bean对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object bean=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String beanPath=prop.getProperty(beanName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//获取beanName在配置文件中对应的beanPath</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bean=Class.forName(beanPath).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过反射用beanPath创建bean对象实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> bean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样一来，就不会频繁的new对象了，减少了对象之间的耦合。</p>
<h2 id="整成单例-恶汉式"><a href="#整成单例-恶汉式" class="headerlink" title="整成单例(恶汉式)"></a>整成单例(恶汉式)</h2><p>刚刚的代码，每次都会调用newInstance()方法，会创建多个对象。在这里将其改成单例模式，在加载的时候便将所有实例创建好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanfactorySingle</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化properties实例，装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//配置文件中为beanName=beanPath的形式，beanPath为全限定类名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//存放bean的容器&lt;beanName,bean对象&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            InputStream is=Beanfactory.class.getResourceAsStream("bean.properties");</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//获取到resources文件夹下的bean.properties配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            prop.load(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过输入流获取配置文件加载到properties实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            beans=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Enumeration keys=prop.keys();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//取出配置文件所有的key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String key=keys.nextElement().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//取出每个key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                String beanPath=prop.getProperty(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//获得每个key的value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object value=Class.forName(beanPath).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//根据全限定类名用反射创建实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                beans.put(key,value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//将所有beanName和bean实例存入容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//从beans容器中取出即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h2><p>将对象的创建控制权转接给了工厂，根据名字由工厂提供，每次需要对象的时候找工厂拿即可。</p>
<h2 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h2><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ClassPathXmlApplicationContext：可以加载类路径下的配置文件，要求配置文件必须在类路径下，不在就加载不了。</p>
<p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件(必须要有访问权限)。</p>
<p>AnnotationConfigApplicationContext：用于读取注解创建容器。</p>
<h3 id="引发的问题"><a href="#引发的问题" class="headerlink" title="引发的问题"></a>引发的问题</h3><p>ApplicationContext：构建核心容器时，立即加载配置文件中的内容。适用于单例对象。实际开发中多用这个接口。</p>
<p>BeanFacroty：采取的是懒加载的方式，当根据id获取对象时，才开始创建对象。适用于多例对象。</p>
<h2 id="bean的管理"><a href="#bean的管理" class="headerlink" title="bean的管理"></a>bean的管理</h2><h3 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h3><h4 id="1，用默认构造函数"><a href="#1，用默认构造函数" class="headerlink" title="1，用默认构造函数"></a>1，用默认构造函数</h4><p>使用bean标签，配置id和class属性，且没有其他标签和属性时，采用的是默认无参构造函数，如果没有就无法创建。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapper"</span> <span class="attr">class</span>=<span class="string">"com.czw.mapper.impl.AccountMapperImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="2，使用某个类中的方法创建"><a href="#2，使用某个类中的方法创建" class="headerlink" title="2，使用某个类中的方法创建"></a>2，使用某个类中的方法创建</h4><p>存在一个工厂类，类中有一个方法可以返回一个car对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> IAccountMapper <span class="title">getAccountMapper</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountMapperImpl();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时，将工厂存入容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"InstanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.czw.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapperByFactory"</span> <span class="attr">factory-bean</span>=<span class="string">"InstanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>通过指定工厂(InstanceFactory)的创建实例方法(getAccountMapper)得到需要的对象。</p>
<h4 id="3，使用静态工厂的静态方法"><a href="#3，使用静态工厂的静态方法" class="headerlink" title="3，使用静态工厂的静态方法"></a>3，使用静态工厂的静态方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapperStatic"</span> <span class="attr">class</span>=<span class="string">"com.czw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="bean作用范围"><a href="#bean作用范围" class="headerlink" title="bean作用范围"></a>bean作用范围</h3><p>bean对象默认是单例的，可以通过bean标签的scope属性修改</p>
<p>取值：</p>
<p>singleton(默认单例)，</p>
<p>prototype(多例)，</p>
<p>request(作用于web应用请求范围)，</p>
<p>session(作用于web应用会话范围)，</p>
<p>global-session(作用于集群环境的会话范围，当不是集群环境，相当于session)</p>
<h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><h4 id="1，单例对象"><a href="#1，单例对象" class="headerlink" title="1，单例对象"></a>1，单例对象</h4><p>容器创建时，对象出生。容器在，对象在。容器毁，对象死。和容器完全一致。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapper"</span> <span class="attr">class</span>=<span class="string">"省略"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>init()和destroy()为对象的初始化和销毁方法。</p>
<p>在容器创建时，init方法执行了。</p>
<p>可以不使用接口类型创建容器，而直接使用实现类创建，然后调用close方法手动关闭容器，此时发现容器销毁时，destroy方法执行了。</p>
<h4 id="2，多例对象"><a href="#2，多例对象" class="headerlink" title="2，多例对象"></a>2，多例对象</h4><p>使用对象时，spring才创建对象，使用过程中一直存活，spring不会销毁对象，当对象长时间不用，且没有别的对象引用时，由Java垃圾回收器回收。</p>
<h2 id="依赖注入-Dependency-Injection"><a href="#依赖注入-Dependency-Injection" class="headerlink" title="依赖注入( Dependency Injection)"></a>依赖注入( Dependency Injection)</h2><p>当需要用到其他类的对象，由spring提供，我们只需要在配置文件中说明。</p>
<p>能注入的类型：</p>
<p>基本类型和String，其他bean类型(在配置文件或注解配置过的)，复杂/集合类型</p>
<p>注入的方式：构造函数提供，set方法提供，注解提供</p>
<h3 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h3><p>在property标签里使用子标签：array，list，set，map，props</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"aList"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- array,set与这个一样--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"aMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"222"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- property与这个类似，entry改为prop，并且在两个prop标签中直接写内容--&gt;</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意：list结构的，map结构的，标签可以互换，比如list对象中用set标签，map对象中用props标签</p>
</blockquote>
<h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><p>经常变化的数据并不适用。</p>
<p>在bean标签内部，使用constructor-arg标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"hello.world.test"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"test"</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>type：要注入的数据类型</p>
<p>value：要注入的值(用于基本类型，String类型)</p>
<p>index：要注入的参数索引</p>
<p>name：要注入的参数名字(常用)</p>
<p>ref：注入关联的bean对象(当遇到value不能转换的类型时使用，比如日期，复杂类型)</p>
<blockquote>
<p>优势：获取bean对象时，注入数据是必须的操作，否则无法创建</p>
<p>缺点：改变了bean对象实例化的方式，使得在创建对象时，用不到这些参数也要提供。</p>
</blockquote>
<h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3><p>在bean标签内部，使用property标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"hello.world.test"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>czw<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>name对应的不是属性名称，而是set方法后的名称，调用set方法赋值。</p>
<blockquote>
<p>优势：创建对象时，没有明确限制，可以直接使用默认构造方法</p>
<p>缺点：如果某个变量必须有值，则获取对象时可能set方法没有执行</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射</title>
    <url>/2020/02/16/Java-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射作用"><a href="#反射作用" class="headerlink" title="反射作用"></a>反射作用</h2><p>1，反编译；2，通过反射机制访问类中的以下几个。</p>
<p>Class<T> 类，Constructor 构造方法，Field 属性，Method 方法，Modifier 修饰符 </T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;				<span class="comment">//Class</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;		<span class="comment">//Field</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;&#125;             <span class="comment">//Constructor</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;			<span class="comment">//Method</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(name+<span class="string">"正在工作。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="获取class类型对象的三种方式"><a href="#获取class类型对象的三种方式" class="headerlink" title="获取class类型对象的三种方式"></a>获取class类型对象的三种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);      <span class="comment">//第一种</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//c1引用保存内存地址指向堆中的对象，该对象代表Emp整个类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class c2=Emp<span class="class">.<span class="keyword">class</span></span>;                 <span class="comment">//第二种</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//java中每个类型都有class属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Emp e=<span class="keyword">new</span> Emp();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class c3=e.getClass();              <span class="comment">//第三种，c3是运行时类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//java中每个对象都有getClass方法</span></span></pre></td></tr></table></figure>

<p>Class.forName(“Emp”)；这是将Emp类装载到JVM虚拟机的过程，会执行静态语句块。</p>
<p>而Class c= Emp.class；不会执行。</p>
<h2 id="创建类的对象实例"><a href="#创建类的对象实例" class="headerlink" title="创建类的对象实例"></a>创建类的对象实例</h2><p>newInstance()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();	<span class="comment">//调用的是无参构造方法，Emp必须要有</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c.getDeclaredConstructor().newInstance();<span class="comment">//据说JDK9之后用这个方法</span></span></pre></td></tr></table></figure>

<h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><h3 id="反射获取类的属性"><a href="#反射获取类的属性" class="headerlink" title="反射获取类的属性"></a>反射获取类的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Field [] fs=c.getFields();		<span class="comment">//获取所有public修饰的属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getDeclaredFields()				<span class="comment">//获取所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Field f:fs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i=f.getModifiers()		<span class="comment">//返回属性修饰符(int类型，0-4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Modifiler.toString(i)		<span class="comment">//返回数字所对应的字符(public。。。)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class type=f.getType()		<span class="comment">//获取属性类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	type.getName()				<span class="comment">//获取类型名称(java.lang.String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    type.getSimpleName()		<span class="comment">//获取类型名称(String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	f.getName()					<span class="comment">//获取属性名字(name)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>综合起来，打印类的结构</p>
<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_f.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);<span class="comment">//获取类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Field[] fs= c.getDeclaredFields();		<span class="comment">//活获取类的所有属性集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(Modifier.toString(c.getModifiers())+<span class="string">" class "</span>+c.getName()+<span class="string">" &#123;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Field f:fs)&#123;		<span class="comment">//遍历所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">"\t"</span>+Modifier.toString(f.getModifiers())+<span class="string">" "</span>);<span class="comment">//修饰符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(f.getType().getSimpleName()+<span class="string">" "</span>);			<span class="comment">//属性类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(f.getName()+<span class="string">";\n"</span>);					<span class="comment">//属性名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_fc.png" alt></p>
<p>结果完美</p>
<p><strong>针对获取某一个属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Field fid=c.getDeclaredField(<span class="string">"id"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fid.setAccessible(<span class="keyword">true</span>);        <span class="comment">//打破封装，使其可以获取私有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();       <span class="comment">//得到Emp类的实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fid.set(o,<span class="number">100</span>);               	<span class="comment">//给对象o的id属性赋值100</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(fid.get(o));	<span class="comment">//获取o的id</span></span></pre></td></tr></table></figure>

<h3 id="反射获取类的方法"><a href="#反射获取类的方法" class="headerlink" title="反射获取类的方法"></a>反射获取类的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method [] ms=c.getMethods();	<span class="comment">//获取所有public修饰的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getDeclaredMethods()			<span class="comment">//获取所有方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Method m:ms)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i=m.getModifiers()		<span class="comment">//返回方法修饰符(int类型，0-4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Modifiler.toString(i)		<span class="comment">//返回数字所对应的字符(public。。。)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class type=m.getReturnType()<span class="comment">//获取方法返回值类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	type.getName()				<span class="comment">//获取返回值类型全称(java.lang.String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    type.getSimpleName()		<span class="comment">//获取返回值类型名称(String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	m.getName()					<span class="comment">//获取方法名字(name)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class[] pts=getParameterTypes()<span class="comment">//获取方法参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pts[index].getSimpleName()					<span class="comment">//获取方法参数类型名称</span></span></pre></td></tr></table></figure>

<p>打印类的方法集</p>
<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_m.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method[] ms=c.getDeclaredMethods();		<span class="comment">//获取方法集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(Modifier.toString(c.getModifiers())+<span class="string">" class "</span>+c.getSimpleName()+<span class="string">" &#123;\n"</span>);			<span class="comment">//打印类信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Method m:ms)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">"\t"</span>+Modifier.toString(m.getModifiers())+<span class="string">" "</span>);<span class="comment">//方法修饰符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(m.getReturnType().getSimpleName()+<span class="string">" "</span>);<span class="comment">//方法返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(m.getName()+<span class="string">"("</span>);					<span class="comment">//方法名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class[] pts=m.getParameterTypes();		<span class="comment">//获取方法参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pts.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(pts[i].getSimpleName());	<span class="comment">//参数类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(i!=pts.length-<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">")&#123;&#125;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_mc.png" alt></p>
<p>结果同样完美</p>
<p><strong>获取某个特定方法并调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method m1=c.getDeclaredMethod(<span class="string">"work"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//与属性不同，要加参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Method m2=c.getDeclaredMethod(<span class="string">"say"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">m1.setAccessible(<span class="keyword">true</span>);        	<span class="comment">//打破封装，使其可以获取私有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();       <span class="comment">//得到Emp类的实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">m1.invoke(o,<span class="string">"ccc"</span>);				<span class="comment">//传入对象和对应参数，无返回值直接使用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object or=m2.invoke(o,<span class="string">"czw"</span>,<span class="number">999</span>);<span class="comment">//有返回值的用对象接受</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(or);			<span class="comment">//输出返回值</span></span></pre></td></tr></table></figure>

<h3 id="反射获取构造方法"><a href="#反射获取构造方法" class="headerlink" title="反射获取构造方法"></a>反射获取构造方法</h3><p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_c.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constructor[] cs=c.getConstructors();</span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Constructor ctr:cs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(Modifier.toString(ctr.getModifiers())+<span class="string">" "</span>+c.getSimpleName()+<span class="string">"("</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class[] cpts=ctr.getParameterTypes();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cpts.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(cpts[i].getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(i!=cpts.length-<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">")&#123;&#125;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_cc.png" alt></p>
<p><strong>获取某个特定构造方法并创建对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constructor ctr=c.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">boolean</span>.<span class="title">class</span>)</span>;<span class="comment">//获取有参构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object oc=ctr.newInstance(<span class="string">"ccc"</span>,<span class="number">18</span>,<span class="keyword">true</span>);<span class="comment">//这个newInstance属于ctr的有参构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(oc);<span class="comment">//打印对象</span></span></pre></td></tr></table></figure>

<h3 id="反射获取父类和实现接口"><a href="#反射获取父类和实现接口" class="headerlink" title="反射获取父类和实现接口"></a>反射获取父类和实现接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">sleep</span></span>&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class sc=c.getSuperclass();		<span class="comment">//获取父类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sc.getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class[] ics=c.getInterfaces();	<span class="comment">//获取接口集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Class i:ics)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(i.getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="反射的缺点"><a href="#反射的缺点" class="headerlink" title="反射的缺点"></a>反射的缺点</h2><p>反射是一种解释操作，性能上是有一定差距的，不如直接new对象。</p>
<p>反射可以获取到私有的属性和方法，所以有一点不安全。</p>
<h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>Java中的可变长参数，可以看作数组，如果有精准匹配的，则不会去执行可变长参数方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... t)</span></span>&#123;		<span class="comment">//参数个数是0-n个，记为方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;			<span class="comment">//记为方法2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"精准匹配"</span>+t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">test();<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test(<span class="number">1</span>)<span class="comment">//此时执行方法2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] is=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(is);<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//可变长参数只能出现一次，并且必须是最后一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... t，<span class="keyword">int</span> i)</span></span>&#123;		<span class="comment">//不可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span>... t)</span></span>&#123;		<span class="comment">//可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>xxx.properties：每行第一个符号(.不算)前的字符串作为键，之后作为值，键是唯一的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties p = <span class="keyword">new</span> Properties();</span></pre></td></tr><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"xxx.properties"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.load(fis);			<span class="comment">//通过输入流加载出配置文件内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">String value1=p.getProperty(<span class="string">"key1"</span>);	<span class="comment">//获取每一个键对应的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">String value2=p.getProperty(<span class="string">"key2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//然后便可以将值用来进行自定义配置</span></span></pre></td></tr></table></figure>

<p>这样增强了代码的灵活性，同样的代码，不同的配置，产生不同的效果，比如Spring Boot框架的配置文件就是这样。</p>
<blockquote>
<p>注意：在出现中文时，要处理好编码，免得发生乱码。</p>
</blockquote>
<p>使用反射+IO+properties配置文件联合应用，可以动态创建对象，在运行时才装载类，更加的灵活，降低了耦合度，增加了扩展性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><p>通过继承Thread类或者实现Runnable，Callable接口</p>
<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>构造方法：Thread()，Thread(String threadname)，</p>
<p>​                    Thread(Runnable target)，Thread(Runnable target，String threadname)</p>
<p>重写run()方法：包含线程运行逻辑</p>
<p>start()方法：开启多线程</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"这是run方法。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(i+<span class="number">1</span>+<span class="string">"只狼"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread tt=<span class="keyword">new</span> aThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tt.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"这是主程序  。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(i+<span class="number">1</span>+<span class="string">"只饺子"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>重写run()方法，同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread tr=<span class="keyword">new</span> Thread(<span class="keyword">new</span> bThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//Thread tr=new Thread(new bThread(),"trname");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//加上线程名称，可以在run方法中通过Thread.cunrrentThread.getName()获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr.start();</span></pre></td></tr></table></figure>

<p>实现Runnable接口可以资源共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"这是实现Runnable接口的run方法。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName()+count+<span class="string">"只狗"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="comment">//获取当前线程名+count值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//主程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Runnable run=<span class="keyword">new</span> bThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr1=<span class="keyword">new</span> Thread(run,<span class="string">"线程11111："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr2=<span class="keyword">new</span> Thread(run,<span class="string">"线程22222："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.start();</span></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_runnable.png" alt></p>
<p>两个线程共享同一个runnable实现类的count值，各自执行，不影响对方</p>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>新建：进程实例声明并创建，即new对象后</p>
<p>就绪：进程已准备好，可以被运行，即调用start()方法后</p>
<p>运行：线程被调度，分配好资源，即进入run()方法里</p>
<p>阻塞：被挂起或执行输入输出操作，即run()方法临时终止了执行</p>
<p>死亡：自然死亡：完成run()后或者抛出异常</p>
<p>强制死亡：执行stop()方法，线程被kill，断电，CPU爆炸等即线程结束</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_life.png" alt></p>
<h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p>Java属于抢占式调度模型</p>
<h3 id="线程优先级-1–10"><a href="#线程优先级-1–10" class="headerlink" title="线程优先级(1–10)"></a>线程优先级(1–10)</h3><p>MAX_PRIORITY            –10(最大)</p>
<p>MIN_PRIORITY            –1(最小)</p>
<p>NORM_PRIORITY        –5(默认) </p>
<p>getPriority()：返回线程优先级</p>
<p>setPriority(int newPriority)：改变线程优先级</p>
<p>注意：线程创建时继承父线程的优先级，优先级不是绝对，只是<strong>较大概率</strong>先运行优先级高的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable run=<span class="keyword">new</span> bThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr1=<span class="keyword">new</span> Thread(run,<span class="string">"线程11111："</span>);<span class="comment">//设置线程名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr2=<span class="keyword">new</span> Thread(run,<span class="string">"线程22222："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.setPriority(<span class="number">2</span>);						<span class="comment">//优先级大</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.setPriority(<span class="number">1</span>);						<span class="comment">//优先级小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.start();</span></pre></td></tr></table></figure>

<p>测了很多次终于出来的结果：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_priority.png" style="zoom:50%;"></td>
<td><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_priority_2.png" style="zoom:50%;"></td>
</tr>
</tbody></table>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>启动线程start()，（stop()：强制停止）</p>
<p>线程逻辑run()，</p>
<p>设置线程名setName(String name)，</p>
<p>获取线程名getName()，</p>
<p>返回当前线程的引用currentThread()，</p>
<p>判断线程是否活着isActive()</p>
<h4 id="yield-：static-void"><a href="#yield-：static-void" class="headerlink" title="yield()：static void"></a>yield()：static void</h4><p>线程让步，让优先级相同的先执行，但让步多长时间不固定，若没同优先级，此方法无效。</p>
<p>改造for循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;			<span class="comment">//当i=1时让步给其他线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.yield();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(Thread.currentThread().getName()+count+<span class="string">"只狗"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_yield.png" alt></p>
<p>线程2执行完一次i++后，i=1让步给线程1，线程1也执行一次i++后再让给线程2，然后继续</p>
<p>可是有时候测出来不是这样，不知道为什么</p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h4><p>当某个线程调用其他线程的join方法时，该线程被阻塞，直到用join()方法加入的线程执行完为止，低优先级也可以获得执行。</p>
<p>在主线程for循环中i=0时插入线程1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"这是主线程。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(i+<span class="number">1</span>+<span class="string">"只饺子"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tr1.join();			<span class="comment">//先执行完tr1再继续循环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_join.png" alt></p>
<p>可以看到线程1的执行过程在主线程的循环中间，而线程2不受控制，说明主线程在调用了线程1的join方法后转去执行线程1，直到结束再回来执行主线程</p>
<h4 id="sleep-long-mills-：static-void"><a href="#sleep-long-mills-：static-void" class="headerlink" title="sleep(long mills)：static void"></a>sleep(long mills)：static void</h4><p>令当前线程在指定时间段内睡眠，使其它线程有机会被执行，时间过去后恢复原样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime start=LocalDateTime.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"即将进入睡眠。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread.sleep(<span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"睡眠完毕。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">LocalDateTime stop=LocalDateTime.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Duration duration = Duration.between(start,stop);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"花费时间："</span>+duration.toMillis()+<span class="string">"毫秒"</span>);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_sleep.png" alt></p>
<p>在即将进入睡眠语句输出后，隔了3000毫秒，睡眠完毕输出，并输出时间差，验证成功。</p>
<blockquote>
<p>如果在main方法中，如果new了一个Thread对象，然后调用了.sleep方法，其实睡眠的还是主线程，因为sleep是静态方法，对象.sleep相当于是类名.sleep，没有区别。</p>
</blockquote>
<h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>依靠异常处理机制，打断休眠，抛出异常，继续运行接下来的代码</p>
<h2 id="线程同步与死锁"><a href="#线程同步与死锁" class="headerlink" title="线程同步与死锁"></a>线程同步与死锁</h2><h3 id="同步问题-数据不唯一"><a href="#同步问题-数据不唯一" class="headerlink" title="同步问题(数据不唯一)"></a>同步问题(数据不唯一)</h3><p>两个线程同时向一个账户取钱，余额出现负数：</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_tongbu.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程逻辑</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	acount.get(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//取钱操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String tname=Thread.currentThread().getName()+<span class="string">"操作---"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(tname+<span class="string">"账户原有："</span>+money+<span class="string">"，提款："</span>+m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(money&gt;=m)&#123;		<span class="comment">//余额充足</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"要取钱拉"</span>);	<span class="comment">//这四条纯粹为了加大出错的概率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"取钱拉"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"钱拉"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"拉"</span>);	</span></pre></td></tr><tr><td class="code"><pre><span class="line">        money-=m;		<span class="comment">//余额减少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(tname+<span class="string">"提款成功，账户余额："</span>+money);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(tname+<span class="string">"账户余额不足。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(tname+<span class="string">"结束-----------------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>原因：当两个线程同时对一个账户进行取钱操作时，线程1判断余额充足后，继续接下来的操作，在还没到对余额进行修改时，线程2可能在此时判断余额充足，这就导致了两个线程同时完成了余额减少操作，金额变为负数，而这是不允许出现的。</p>
<p>解决办法：在一个线程执行对数据的操作时，其他线程不能执行。</p>
<h4 id="1，synchronized代码块-推荐使用"><a href="#1，synchronized代码块-推荐使用" class="headerlink" title="1，synchronized代码块(推荐使用)"></a>1，synchronized代码块(推荐使用)</h4><p>将需要同步的代码放在synchronized(这里是加锁的对象){这里是代码}代码块中</p>
<blockquote>
<p>这样这一段代码只有一个线程能执行，当t1执行到这段代码时，就会去找该对象的对象锁，如果找到，就进入代码块中执行，执行完后，归还对象锁。如果在t2在执行过程中也遇到了这段代码，也去找对象锁，发现该对象锁被t1持有，只能等待t1归还对象锁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">synchronized</span>(被锁对象)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//取钱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="2，synchronized关键字"><a href="#2，synchronized关键字" class="headerlink" title="2，synchronized关键字"></a>2，synchronized关键字</h4><p>在取钱操作get()方法上加上synchronized关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//取钱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>synchronized关键字锁的不是方法，而是对象。</strong></p>
<p>比如新加一个同样的get2()方法，然后改造run()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"wechat"</span>.equals(Thread.currentThread().getName()))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    acount.get2(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    acount.get(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当线程为wechat时执行get2()，线程为alipay时执行get()，发现其中一个还是只能等待另一个线程结束才能执行。</p>
<p> <strong>当两个线程操作的对象不一样时，就锁不了。</strong></p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_tongbu2.png" alt></p>
<p>加上关键字后，发现微信执行完之后，支付宝才能执行，此时就达到了目的。</p>
<blockquote>
<p>注意：在静态方法上加锁时，对于所有的对象都是同一个锁，这个锁就称为类锁，即该类所有对象都是同一把锁。当执行到带synchronized关键字的静态方法时，会去找类锁，哪怕操作不同对象时也要等待拥有类锁的线程执行完。</p>
</blockquote>
<h3 id="死锁问题-永远等待"><a href="#死锁问题-永远等待" class="headerlink" title="死锁问题(永远等待)"></a>死锁问题(永远等待)</h3><p>著名的哲学家吃饭问题，n个人围成圆桌，总共有n根筷子，与哲学家插空放置。哲学家想要吃饭，必须拿两根筷子，当每个哲学家拿起左边的筷子时，再去拿右边的筷子，此时筷子已经被右边的哲学家拿走，此时陷入死锁状态。</p>
<p>线程T1先拿到o1的对象锁，然后想接着拿o2的对象锁，而线程T2相反。由于两个线程同步执行，所以会出现，线程T1拿到了o1的锁，同时线程T2拿到了o2的锁，形成了互相等待对方执行完成的局面，而双方都不可能执行完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object o2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">T1</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.o1=o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.o2=o2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (o1)&#123;		<span class="comment">//线程T1先拿到o1对象锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了o1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;			<span class="comment">//短暂延时，引起问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">synchronized</span> (o2)&#123;	<span class="comment">//接着拿o2对象锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>线程T2与线程T1类似，只是先拿o2再拿o1。</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>所有的用户线程(以上都是)结束生命周期，守护线程才会结束，例如Java中的垃圾回收器。</p>
<p>守护线程一般都是无限执行的。</p>
<p>setDaemon(true)方法可以将用户线程设置为守护线程</p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>Timer：每隔一段固定时间执行任务</p>
<p>schedule(TimeTask task，Date firstTime，long perlod)：指定定时任务</p>
<p>task：任务，firstTime：起始时间，perlod，间隔时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">TimeTask</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.pritln(<span class="string">"..."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS服务器体验</title>
    <url>/2020/02/12/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>配置：2核4G内存1Mbps带宽</p>
<p>系统：CentOS7.7</p>
<h2 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h2><p>重置密码，修改主机名、实例名，设置安全组(80，443，3306等)</p>
<p>Xshell连接服务器</p>
<a id="more"></a>

<h3 id="宝塔面板安装-开放8888端口"><a href="#宝塔面板安装-开放8888端口" class="headerlink" title="宝塔面板安装(开放8888端口)"></a>宝塔面板安装(开放8888端口)</h3><p>用来管控还是挺好的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span></pre></td></tr></table></figure>

<p>傻瓜式选择LNMP(Linux，Nginx1.16，MySQL5.6，PHP5.6)一键安装</p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置仓库</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span></pre></td></tr><tr><td class="code"><pre><span class="line">配置镜像源</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">安装docker-ce</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span></pre></td></tr><tr><td class="code"><pre><span class="line">启动</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start docker</span></pre></td></tr><tr><td class="code"><pre><span class="line">查看版本</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker version</span></pre></td></tr></table></figure>

<h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">2、拉取镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">3、根据镜像启动容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run --name mytomcat -d tomcat:latest</span></pre></td></tr><tr><td class="code"><pre><span class="line">4、docker ps  </span></pre></td></tr><tr><td class="code"><pre><span class="line">查看运行中的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">5、 停止运行中的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker stop  容器的id</span></pre></td></tr><tr><td class="code"><pre><span class="line">6、查看所有的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker ps -a</span></pre></td></tr><tr><td class="code"><pre><span class="line">7、启动容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker start 容器id</span></pre></td></tr><tr><td class="code"><pre><span class="line">8、删除一个容器</span></pre></td></tr><tr><td class="code"><pre><span class="line"> docker rm 容器id</span></pre></td></tr><tr><td class="code"><pre><span class="line">9、启动一个做了端口映射的tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">-d：后台运行</span></pre></td></tr><tr><td class="code"><pre><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">10、为了演示简单关闭了linux的防火墙</span></pre></td></tr><tr><td class="code"><pre><span class="line">service firewalld status ；查看防火墙状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">service firewalld stop：关闭防火墙</span></pre></td></tr><tr><td class="code"><pre><span class="line">11、查看容器的日志</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker logs container-name/container-id</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">更多命令参看</span></pre></td></tr><tr><td class="code"><pre><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span></pre></td></tr><tr><td class="code"><pre><span class="line">可以参考每一个镜像的文档</span></pre></td></tr></table></figure>

<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span></pre></td></tr></table></figure>

<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql退出了</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//错误日志</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker logs 42f09819908b</span></pre></td></tr><tr><td class="code"><pre><span class="line">error: database is uninitialized and password option is not specified </span></pre></td></tr><tr><td class="code"><pre><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span></pre></td></tr></table></figure>

<p>几个其他的高级操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span></pre></td></tr><tr><td class="code"><pre><span class="line">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span></pre></td></tr><tr><td class="code"><pre><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span></pre></td></tr><tr><td class="code"><pre><span class="line">指定mysql的一些配置参数</span></pre></td></tr></table></figure>

<h3 id="redis-in-docker"><a href="#redis-in-docker" class="headerlink" title="redis in docker"></a>redis in docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name 名字 -p 6379:6379 -d redis --requirepass &quot;密码&quot;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器相关</category>
      </categories>
      <tags>
        <tag>Aliyun</tag>
        <tag>docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流</title>
    <url>/2020/02/10/Java-IO%E6%B5%81/</url>
    <content><![CDATA[<h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>文件流(基于硬盘，速度慢，名字里带File)，缓冲流(走内存，速度快，名字里带Buffer)</p>
<p>字节流/字符流：In(Out)putStream，Reader/Writer</p>
<p>转换流：InputStreamReader/OutputStreamWriter</p>
<p>标准输入输出流</p>
<p>打印流：PrintSream，PrintWriter</p>
<p>数据流：DataInputStream，DataOutputStream</p>
<p>对象流：ObjectInputStream，ObjectOutputStream   –涉及序列化/反序列化</p>
<p>随机存取文件流：RandomAccessFile(随机意思是人为可操控，而不是电脑随机)</p>
<a id="more"></a>

<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下"><a href="#能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下" class="headerlink" title="能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下"></a>能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile=<span class="keyword">new</span> File(<span class="string">"/testfprder/test.txt"</span>);			<span class="comment">//相对路径(文件)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile3=<span class="keyword">new</span> File(<span class="string">"/testfprder/aforder"</span>);			<span class="comment">//相对路径(目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile2=<span class="keyword">new</span> File(<span class="string">"/testfprder/"</span>,<span class="string">"test.txt"</span>);		<span class="comment">//父路径+文件名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//获取信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getName()				<span class="comment">//获取文件或目录名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getPath()				<span class="comment">//获取new的时候的路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getAbsolutePath()		<span class="comment">//获取绝对路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getAbsoluteFile()		<span class="comment">//返回一个用绝对路径new的File对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getParent()				<span class="comment">//返回父级路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.renameTo(<span class="keyword">new</span> File())	<span class="comment">//重命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.exists()				<span class="comment">//判断文件是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.canRead()				<span class="comment">//是否可读(对应canWrite()是否可写)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.isFile()				<span class="comment">//是否是文件(对应有isDerectory()是否是目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.lastModified()			<span class="comment">//最后修改事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.length()				<span class="comment">//文件长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//增删查</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.createNewFile()			<span class="comment">//创建文件，需捕获异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.delete()				<span class="comment">//删除文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.mkdir()					<span class="comment">//创建目录(直接mkdirs()创建多层目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.list()				<span class="comment">//列出所有目录下的文件/子目录(返回String[]类型)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.listFiles()				<span class="comment">//同上，返回File[]类型数组</span></span></pre></td></tr></table></figure>

<h4 id="递归遍历文件目录"><a href="#递归遍历文件目录" class="headerlink" title="递归遍历文件目录"></a>递归遍历文件目录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(File file)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(file.isFile())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getAbsolutePath()+<span class="string">"是文件"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getAbsolutePath()+<span class="string">"是目录"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File[] fs=file.listFiles();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(fs!=<span class="keyword">null</span>&amp;&amp;fs.length&gt;<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(File f:fs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                listAll(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/file_listall.png" alt></p>
<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">byte</span>[] bt=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];				<span class="comment">//每次8个字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ((len=fis.read(bt))!=-<span class="number">1</span>)&#123;		<span class="comment">//直到最后一个字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="keyword">new</span> String(bt,<span class="number">0</span>,len));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"len："</span>+len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"----------------------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="keyword">new</span> String(bt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fis.png" alt></p>
<h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"testforder/good.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str=<span class="string">"talk is cheap,show me your code"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.write(str.getBytes());		<span class="comment">//写到内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.flush();					<span class="comment">//刷新，将内存写入硬盘</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fos.png" alt></p>
<h5 id="字节流复制文件"><a href="#字节流复制文件" class="headerlink" title="字节流复制文件"></a>字节流复制文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileCopy</span><span class="params">(String inpath,String outPath)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(inpath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">byte</span>[] bt=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ((len=fis.read(bt))!=-<span class="number">1</span>)&#123;		<span class="comment">//读取文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos.write(bt,<span class="number">0</span>,len);			<span class="comment">//写入内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fos.flush();						<span class="comment">//刷新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fos.close();						<span class="comment">//关闭流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//调用方法，传入参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fileCopy(<span class="string">"testforder/good.txt"</span>,<span class="string">"testforder/aforder/good.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fileCopy(<span class="string">"testforder/beautiful.jpg"</span>,<span class="string">"testforder/aforder/good.jpg"</span>);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fcopy.png" alt></p>
<h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>与字节流差不多，不过针对字符，不像字节流可以操作所有类型文件(图片，压缩包，等等)</p>
<p>FileInputStream对应FileReader，FileOutputStream对应FileWriter</p>
<p>byte[] 字节数组对应char[] 字符数组</p>
<p>其他都一样</p>
<h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><p>先把数据缓冲到内存中，然后在内存中进行io操作，速度快很多。</p>
<p>将File替换成Buffer即可，并要事先new FileInputStream()对象(输出流同理，注意flush)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"/testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">BufferInputStream bis=<span class="keyword">new</span> BufferInputStream(fis);</span></pre></td></tr><tr><td class="code"><pre><span class="line">......</span></pre></td></tr><tr><td class="code"><pre><span class="line">bis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">fis.close();</span></pre></td></tr></table></figure>

<h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p>字节流与字符流互相转换，当字节流数据都是字符时，转换成字符流，提高效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"/testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(fis,<span class="string">"utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//接下来isr即可当Reader字符流使用，编码要与读取文件编码一致，记事本默认GBK</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">......</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//一样的操作</span></span></pre></td></tr></table></figure>

<h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>Data替换File，构造方法与缓冲流类似，输出流输出到文件中不能直接辨认，是乱码，需要通过输入流读出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readBoolean(),readInt(),readDouble()</span></pre></td></tr><tr><td class="code"><pre><span class="line">writeBoolean(),wirteInt(),writeDouble()		<span class="comment">//方法一一对应</span></span></pre></td></tr></table></figure>

<h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4><p>将对象转换成二进制进行网络传输</p>
<p>序列化：将对象写入IO流，</p>
<p>反序列化：从IO流中恢复成对象</p>
<p>需要对象实现Serializable接口(或者Externalizable，用的少)</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_serializable.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSerialize</span> <span class="params">(String path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">"jack"</span>,<span class="number">18</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"序列化："</span>+p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.writeObject(p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDeserialize</span> <span class="params">(String path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person p=(Person) ois.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"反序列化后："</span>+p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ois.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            testSerialize(<span class="string">"testforder/aforder/bforder/ohuo.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            testDeserialize(<span class="string">"testforder/aforder/bforder/ohuo.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>运行结果：文本中</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/xuliehua.png" alt></p>
<p>控制台</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/fanxuliehua.png" alt></p>
<p>注意：序列化和反序列化的类名，包名，结构必须完全一致。</p>
<h4 id="随机存取流"><a href="#随机存取流" class="headerlink" title="随机存取流"></a>随机存取流</h4><p>省略。。。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易HashMap</title>
    <url>/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/</url>
    <content><![CDATA[<h3 id="一，关于哈希表-Hash-Table"><a href="#一，关于哈希表-Hash-Table" class="headerlink" title="一，关于哈希表(Hash Table)"></a>一，关于哈希表(Hash Table)</h3><p>定义：<a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/数据结构/1450" target="_blank" rel="noopener">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<a href="https://baike.baidu.com/item/散列函数/2366288" target="_blank" rel="noopener">散列函数</a>，存放记录的<a href="https://baike.baidu.com/item/数组/3794097" target="_blank" rel="noopener">数组</a>叫做<a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>。</p>
<p>​        给定表H，存在函数hash(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表H为<strong>哈希(Hash）表</strong>，函数hash(key)为<strong>哈希(Hash) 函数</strong>。</p>
<a id="more"></a>

<p>哈希函数考虑因素：计算哈希函数所需时间，关键字的长度，哈希表的大小，关键字的分布情况，记录的查找频率。</p>
<p>常用方法：</p>
<p><strong>直接定址法</strong>：直接以关键字k或者k加上某个常数（k+c）作为哈希地址。</p>
<p><strong>数字分析法</strong>：提取关键字中取值比较均匀的数字作为哈希地址。</p>
<p><strong>除留余数法</strong>：用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。</p>
<p><strong>分段叠加法</strong>：按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>
<p><strong>平方取中法</strong>：如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。</p>
<p><strong>伪随机数法</strong>：采用一个伪随机数当作哈希函数。</p>
<h3 id="二，关于哈希冲突：不同key值得到相同地址"><a href="#二，关于哈希冲突：不同key值得到相同地址" class="headerlink" title="二，关于哈希冲突：不同key值得到相同地址"></a>二，关于哈希冲突：不同key值得到相同地址</h3><p>解决办法：</p>
<ul>
<li>开放定址法：开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li><strong>链地址法</strong>：将哈希表的每个单元作为链表的头结点，所有哈希地址为i的元素构成一个同义词链表。即发生冲突时就把该关键字链在以该单元为头结点的链表的尾部。</li>
<li>再哈希法：当哈希地址发生冲突用其他的函数计算另一个哈希函数地址，直到冲突不再产生为止。</li>
<li>建立公共溢出区：将哈希表分为基本表和溢出表两部分，发生冲突的元素都放入溢出表中。</li>
</ul>
<h3 id="三，关于HashMap"><a href="#三，关于HashMap" class="headerlink" title="三，关于HashMap"></a>三，关于HashMap</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​        基于哈希表的 Map 接口的实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了不同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。另外，HashMap是非线程安全的，也就是说在多线程的环境下，可能会存在问题，而Hashtable是线程安全的。</p>
<p>​        HashMap 的实例有两个参数影响其性能：初始容量 和加载因子。容量是<a href="https://baike.baidu.com/item/哈希表" target="_blank" rel="noopener">哈希表</a>中桶的数量，初始容量只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。在Java中，加载因子默认值为0.75，默认初始容量为16 。</p>
<p>​        <strong>HashMap是线程不安全的，线程安全用ConcurrentHashMap</strong></p>
<h4 id="解决冲突方法"><a href="#解决冲突方法" class="headerlink" title="解决冲突方法"></a>解决冲突方法</h4><p>​        在Java中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；而链表的特点是：寻址困难，插入和删除容易。上面我们提到过，常用的哈希函数的冲突解决办法中有一种方法叫做链地址法，其实就是将数组和链表组合在一起，发挥了两者的优势，我们可以将其理解为链表的数组。</p>
<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashtable.png" alt></p>
<h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>​        在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从<code>O(1)</code>降低到<code>O(n)</code>。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从<code>O(n)</code>提高到<code>O(logn)</code>。</p>
<p>​        如果恶意程序知道我们用的是Hash算法，则在纯链表情况下，它能够发送大量请求导致哈希碰撞，然后不停访问这些key导致HashMap忙于进行线性查找，最终陷入瘫痪，即形成了拒绝服务攻击（DDoS）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;				<span class="comment">//JDK1.7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;		<span class="comment">//JDK1.8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> index = hash &amp; (tab.length-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>​        在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的。以上方法得到的int的hash值，然后再通过<code>h &amp; (table.length -1)</code>来得到该对象在数据中保存的位置。</p>
<p>​        当链表长度大于等于8的时候将链表转换为红黑树，利用红黑树的特点(查找、插入、删除的时间复杂度最坏为O(logn))，可以提高HashMap的性能。当节点个数少于6个的时候，又会将红黑树转化为链表。</p>
<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashmap_jdk8.webp" alt></p>
<h3 id="四，开始"><a href="#四，开始" class="headerlink" title="四，开始"></a>四，开始</h3><h4 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h4><p>​        –添加数据，获取键对应值</p>
<h4 id="构建节点"><a href="#构建节点" class="headerlink" title="构建节点"></a>构建节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeC</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;		<span class="comment">//hash值（存储位置）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> K key;		<span class="comment">//键</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    V value;			<span class="comment">//值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K, V&gt; next;	<span class="comment">//下一节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC(<span class="keyword">int</span> hash, K key, V value, NodeC&lt;K, V&gt; next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.hash = hash;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.key = key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.value = value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.next = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="构造HashMap"><a href="#构造HashMap" class="headerlink" title="构造HashMap"></a>构造HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapC</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> size;						<span class="comment">//长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K,V&gt; table[];				<span class="comment">//数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapC</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table=<span class="keyword">new</span> NodeC[<span class="number">16</span>];		<span class="comment">//默认长度16（2的整数次幂）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="哈希函数-1"><a href="#哈希函数-1" class="headerlink" title="哈希函数"></a>哈希函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;		<span class="comment">//JDK8同款</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> index = hash &amp; (table.length-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//System.out.println("hash值为："+index);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="添加数据-put-K-k-V-v"><a href="#添加数据-put-K-k-V-v" class="headerlink" title="添加数据[put(K k,V v)]"></a>添加数据[put(K k,V v)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K k,V v)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> h=hash(k);						<span class="comment">//计算哈希值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        NodeC nc=<span class="keyword">new</span> NodeC(h,k,v,<span class="keyword">null</span>);		<span class="comment">//新建节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        NodeC temp=table[h];				<span class="comment">//找到该节点对应位置的链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Boolean flag=<span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(temp==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            table[h]=nc;					<span class="comment">//该链表暂时没有数据，将节点放入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (temp!=<span class="keyword">null</span>)&#123;				<span class="comment">//遍历链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(temp.key==k)&#123;			<span class="comment">//发现同一个键，覆盖value值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    temp.value=v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    flag=<span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(temp.next==<span class="keyword">null</span>)&#123;		<span class="comment">//没有下一个节点，结束遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp=temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next=nc;				<span class="comment">//为新元素，加载表尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="获取key值对应的value值-get-K-k"><a href="#获取key值对应的value值-get-K-k" class="headerlink" title="获取key值对应的value值[get(K k)]"></a>获取key值对应的value值[get(K k)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h=hash(key);						<span class="comment">//计算哈希值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K,V&gt; temp=table[h];				<span class="comment">//找到链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (temp!=<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (temp.key==key) &#123;				<span class="comment">//找到键，返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> temp.value;				</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp=temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;							<span class="comment">//没找到，返回null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="重写toString方法便于观察"><a href="#重写toString方法便于观察" class="headerlink" title="重写toString方法便于观察"></a>重写toString方法便于观察</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    StringBuilder result=<span class="keyword">new</span> StringBuilder(<span class="string">"&#123;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;			<span class="comment">//从第一个链表开始遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(table[i]==<span class="keyword">null</span>)&#123;						<span class="comment">//跳过空节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (table[i]!=<span class="keyword">null</span>) &#123;			<span class="comment">//遍历链表所有节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                result.append(table[i].key+<span class="string">" = "</span>+table[i].value+<span class="string">"，"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                table[i]=table[i].next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!result.equals(<span class="string">"&#123;"</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.setCharAt(result.length()-<span class="number">1</span>,<span class="string">'&#125;'</span>);<span class="comment">//删除最后的逗号</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="五，测试方法"><a href="#五，测试方法" class="headerlink" title="五，测试方法"></a>五，测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HashMapC&lt;Integer,String&gt; hmc=<span class="keyword">new</span> HashMapC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">1</span>,<span class="string">"一"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">2</span>,<span class="string">"二"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">3</span>,<span class="string">"三"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">4</span>,<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">17</span>,<span class="string">"十七"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">18</span>,<span class="string">"十八"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">33</span>,<span class="string">"三十三"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">1</span>,<span class="string">"111"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">18</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">33</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"end..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HashMapC&lt;String,Integer&gt; hmc2=<span class="keyword">new</span> HashMapC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"a"</span>,<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"b"</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"k"</span>,<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"z"</span>,<span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"a"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"b"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"k"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"z"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashmap_result.png" alt></p>
<h3 id="六，总结"><a href="#六，总结" class="headerlink" title="六，总结"></a>六，总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易LinkedList</title>
    <url>/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/</url>
    <content><![CDATA[<p>​        LinkedList属于List接口的实现类之一，与ArrayList不同之处是采用的存储结构不同，ArrayList的数据结构为线性表，而LinkedList数据结构是链表。链表数据结构的特点是每个元素分配的空间不必连续、插入和删除元素时速度非常快、但访问元素的速度较慢。LinkedList是一个双向链表, 当数据量很大或者操作很频繁的情况下，添加和删除元素时具有比ArrayList更好的性能。但在元素的查询和修改方面要弱于ArrayList。LinkedList类每个结点用内部类Node表示，LinkedList通过first和last引用分别指向链表的第一个和最后一个元素，当链表为空时，first和last都为NULL值。</p>
<a id="more"></a>

<h3 id="一，关于链表"><a href="#一，关于链表" class="headerlink" title="一，关于链表"></a>一，关于链表</h3><table>
<thead>
<tr>
<th>类型</th>
<th>包含节点</th>
<th>第一和最后节点指向</th>
</tr>
</thead>
<tbody><tr>
<td>单向链表</td>
<td>尾节点</td>
<td>尾的next=&gt;null</td>
</tr>
<tr>
<td>单向循环链表</td>
<td>尾节点</td>
<td>尾的next=&gt;头</td>
</tr>
<tr>
<td>双向链表</td>
<td>头，尾节点</td>
<td>每个节点头尾各自对应前后元素，first和last的prev/next对应null</td>
</tr>
<tr>
<td>双向循环链表</td>
<td>头，尾节点</td>
<td>last的next=&gt;first，first的next=&gt;last</td>
</tr>
</tbody></table>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/single_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/single_for_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/double_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/double_for_list.webp" alt></p>
<h3 id="二，关于LinkedList"><a href="#二，关于LinkedList" class="headerlink" title="二，关于LinkedList"></a>二，关于LinkedList</h3><p>LinkedList 是一个继承于AbstractSequentialList的<strong>双向循环链表</strong>。它也可以被当作堆栈、队列或双端队列进行操作。<br>LinkedList 实现 List 接口，能对它进行<strong>队列</strong>操作。<br>LinkedList 实现 Deque 接口，即能将LinkedList当作<strong>双端队列</strong>使用。<br>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能<strong>克隆</strong>。<br>LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持<strong>序列化</strong>，能通过序列化去传输。<br>LinkedList 是<strong>非同步</strong>的。</p>
<h3 id="三，实现的功能"><a href="#三，实现的功能" class="headerlink" title="三，实现的功能"></a>三，实现的功能</h3><p>​        –尾部添加，索引查找，索引插入，索引修改，索引删除</p>
<h3 id="四，构建节点"><a href="#四，构建节点" class="headerlink" title="四，构建节点"></a>四，构建节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;		<span class="comment">//作为LinkedListC的内部类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; prev;	<span class="comment">//头节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    E data;			<span class="comment">//数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; next;	<span class="comment">//尾节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.prev = prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data = data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.next = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="五，构建LinkedList"><a href="#五，构建LinkedList" class="headerlink" title="五，构建LinkedList"></a>五，构建LinkedList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListC</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size=<span class="number">0</span>;		<span class="comment">//链表长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;	<span class="comment">//首部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;	<span class="comment">//尾部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span>				<span class="comment">//重写toString方法，便于观察</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder llc=<span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(first.data+<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.setCharAt(llc.length()-<span class="number">1</span>,<span class="string">']'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(<span class="string">"]"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> llc.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="六，方法的编写"><a href="#六，方法的编写" class="headerlink" title="六，方法的编写"></a>六，方法的编写</h3><h4 id="获取索引所代表的节点-getNode-int-index"><a href="#获取索引所代表的节点-getNode-int-index" class="headerlink" title="获取索引所代表的节点[getNode(int index)]"></a>获取索引所代表的节点[getNode(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;			<span class="comment">//分成了前后两部分，提高效率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"索引越界："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;=size/<span class="number">2</span>)&#123;				<span class="comment">//前半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//后半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size-index-<span class="number">1</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="尾部添加-add-E-e"><a href="#尾部添加-add-E-e" class="headerlink" title="尾部添加[add(E,e)]"></a>尾部添加[add(E,e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node&lt;E&gt; node=<span class="keyword">new</span> Node&lt;E&gt;(e);	<span class="comment">//新建节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;				<span class="comment">//第一次添加，设置头尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;							<span class="comment">//其他添加，尾部插入新节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            							<span class="comment">//并改变first的prev指向和last</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            last.next=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;							<span class="comment">//长度+1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引添加-insert-int-index-E-e"><a href="#索引添加-insert-int-index-E-e" class="headerlink" title="索引添加[insert(int index,E e)]"></a>索引添加[insert(int index,E e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);		<span class="comment">//获取索引的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node newnode=<span class="keyword">new</span> Node(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) &#123;			</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev = node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.next = node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev = node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//只有一个节点的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//如果是第一个节点，将其设为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引查询-get-int-index"><a href="#索引查询-get-int-index" class="headerlink" title="索引查询[get(int index)]"></a>索引查询[get(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> getNode(index).data.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引修改-set-int-index"><a href="#索引修改-set-int-index" class="headerlink" title="索引修改[set(int index)]"></a>索引修改[set(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"即将将索引为"</span>+index+<span class="string">"的数改为"</span>+e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        getNode(index).data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引删除-remove-int-index"><a href="#索引删除-remove-int-index" class="headerlink" title="索引删除[remove(int index)]"></a>索引删除[remove(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"要删除的索引是："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>)&#123;				<span class="comment">//不止一个时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_next=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_next.prev=node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//第一个时，设置为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                first=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;								<span class="comment">//只有一个时，恢复出厂设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size--;								<span class="comment">//长度-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h3 id="七，测试过程"><a href="#七，测试过程" class="headerlink" title="七，测试过程"></a>七，测试过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LinkedListC&lt;Integer&gt; li= <span class="keyword">new</span> LinkedListC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(li.toString());<span class="comment">//检验toString方法，此时为空链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.add(<span class="number">1</span>);				<span class="comment">//添加一个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行add方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.set(<span class="number">0</span>,<span class="number">9</span>);			<span class="comment">//将刚刚的1修改为9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行set方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行get方法后："</span>+li.get(<span class="number">0</span>));	<span class="comment">//获取第一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.remove(<span class="number">0</span>);			<span class="comment">//移除那个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行remove方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.insert(<span class="number">0</span>,<span class="number">5</span>);		<span class="comment">//在那个1的地方插入5(由于已经被移除，所以不存在0索引将抛出异常)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行insert方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/test_result.png" alt></p>
<h3 id="八，总结"><a href="#八，总结" class="headerlink" title="八，总结"></a>八，总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios综合练习(Cplayer播放器)</title>
    <url>/2020/02/07/Vue-Axios%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0-Cplayer%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h3 id="歌曲，评论，MV均来自网易云"><a href="#歌曲，评论，MV均来自网易云" class="headerlink" title="歌曲，评论，MV均来自网易云"></a>歌曲，评论，MV均来自网易云</h3><p><a href="/VueLearning/Cplayer.html">&gt;播放器点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios小练习(记事本，城市天气查询)</title>
    <url>/2020/02/06/Vue-Axios%E5%B0%8F%E7%BB%83%E4%B9%A0-%E8%AE%B0%E4%BA%8B%E6%9C%AC%EF%BC%8C%E5%9F%8E%E5%B8%82%E5%A4%A9%E6%B0%94%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><a href="/jishiben.html" target="ifr">&gt;记事本点这里&lt;</a></p>
<p><a href="/axios_learning.html" target="ifr">&gt;天气查询点这里&lt;</a></p>
<iframe src name="ifr" width="800px" height="336px" marginwidth="0" marginheight="0" frameborder="0" margin="0" style="background:pink;border-radius:5px;"></iframe>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础指令学习</title>
    <url>/2020/02/05/Vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="/VueLearning/vuejichu.html">&gt;具体网页点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一则随机笑话(每20s刷新)</title>
    <url>/2020/02/04/%E4%B8%80%E5%88%99%E9%9A%8F%E6%9C%BA%E7%AC%91%E8%AF%9D-%E6%AF%8F20s%E5%88%B7%E6%96%B0/</url>
    <content><![CDATA[<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script type="text/javascript" src="/js/random-joke.js"></script>

<h4 id="joke" style="color:red">随机笑话在这显示，如果你一直都能看到这句话，说明我出BUG了

</h4>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Axios</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot入门</title>
    <url>/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h2><p>​        对于一个刚学了9天，且仅仅了解一点点Spring，SpringMVC的人来说，Spring Boot是Spring和SpringMVC的自动配置版，容易上手，只需导入相关模块的启动器，就可以使用，免去了大量xml文件的配置，并且内嵌了Tomcat(默认)，Jetty，Undertow。省去了配tomcat的烦恼。spring boot大量使用注解的方式进行开发，也可以通过重写配置类修改默认配置，非常的便捷。并且spring boot可以整合其他优秀的框架和技术。</p>
<p>​        这9天使用spring boot 2.2.2版本进行学习，看了一些视频，看了一些博客，还翻了官方文档，算是有了一个初步的了解。</p>
<a id="more"></a>

<hr>
<h2 id="Spring-Boot初体验之Hello-World"><a href="#Spring-Boot初体验之Hello-World" class="headerlink" title="Spring Boot初体验之Hello World"></a>Spring Boot初体验之Hello World</h2><h4 id="Spring-Boot工程目录结构"><a href="#Spring-Boot工程目录结构" class="headerlink" title="Spring Boot工程目录结构"></a>Spring Boot工程目录结构</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/SB%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="SB工程目录"></p>
<h4 id="导入Web模块依赖"><a href="#导入Web模块依赖" class="headerlink" title="导入Web模块依赖"></a>导入Web模块依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HelloController &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @ResponseBody</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String hello()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Hello World!&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="运行主程序"><a href="#运行主程序" class="headerlink" title="运行主程序"></a>运行主程序</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E4%B8%BB%E7%A8%8B%E5%BA%8F.png" alt></p>
<h4 id="控制台打印的日志信息"><a href="#控制台打印的日志信息" class="headerlink" title="控制台打印的日志信息"></a>控制台打印的日志信息</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E6%97%A5%E5%BF%97.png" alt></p>
<h4 id="浏览器访问8080端口发送hello请求"><a href="#浏览器访问8080端口发送hello请求" class="headerlink" title="浏览器访问8080端口发送hello请求"></a>浏览器访问8080端口发送hello请求</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/hello.png" alt></p>
<h4 id="第一步走出去了！！！"><a href="#第一步走出去了！！！" class="headerlink" title="第一步走出去了！！！"></a>第一步走出去了！！！</h4><h2 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h2>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次接触MyBatis</title>
    <url>/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/</url>
    <content><![CDATA[<h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><h2 id><a href="#" class="headerlink" title></a><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="工程目录"></h2><a id="more"></a>

<h2 id="porn-xml文件"><a href="#porn-xml文件" class="headerlink" title="porn.xml文件"></a>porn.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnMybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13-rc-2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr></table></figure>
<hr>
<h2 id="mybatis-config-xml全局配置文件"><a href="#mybatis-config-xml全局配置文件" class="headerlink" title="mybatis-config.xml全局配置文件"></a>mybatis-config.xml全局配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环境 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?    serverTimezone=UTC"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/study/mapper/UserMapper.xml"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure>
<hr>
<h2 id="User类以及Mysql中的user表"><a href="#User类以及Mysql中的user表" class="headerlink" title="User类以及Mysql中的user表"></a>User类以及Mysql中的user表</h2><h3 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/User%E7%B1%BB.png" alt="User类"></p>
<h3 id="user表"><a href="#user表" class="headerlink" title="user表"></a>user表</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/user%E8%A1%A8.png" alt="user表"></p>
<hr>
<h2 id="UserMapper-xml文件配置"><a href="#UserMapper-xml文件配置" class="headerlink" title="UserMapper.xml文件配置"></a>UserMapper.xml文件配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.UserMapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectuser"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user where id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectall"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></pre></td></tr></table></figure>

<hr>
<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String resource=<span class="string">"Mybatis-config.xml"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    InputStream in=Resources.getResourceAsStream(resource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSessionFactory sqlsf=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSession os=sqlsf.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//User u=os.selectOne("com.study.mapper.UserMapper.selectuser",1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;User&gt; ul=os.selectList(<span class="string">"com.study.mapper.UserMapper.selectall"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//System.out.println(u);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(User u:ul)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(u.getId()+<span class="string">","</span>+u.getUsername()+<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        os.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<hr>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>   经过一番折腾，总算是把它弄出来了，在引用的时候要特别注意路径的问题，还有maven版本和mybatis版本也要注意，甚至时区问题都能有也是服了。mybatis类的属性名和表的字段名要一致。</p>
<h3 id="改革尚未成功，同志仍需努力。"><a href="#改革尚未成功，同志仍需努力。" class="headerlink" title="改革尚未成功，同志仍需努力。"></a>改革尚未成功，同志仍需努力。</h3>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>更换主题</title>
    <url>/2019/12/09/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>1 在E:\Hexo下用命令行安装：<br>    例如： git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia<br>2 配置：修改Hexo文件夹下_config.yml文件的theme为新主题名字<br>3 hexo clean 和 hexo g<br>4 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>发布文章</title>
    <url>/2019/12/09/%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>1 进入E:\Hexo目录<br>2 hexo new “文章标题”<br>3 在source/_posts下会生成.md文件<br>4 打开文件(Typora，VScode等软件)进行文章编写并保存<br>5 hexo clean清理<br>6 hexo g生成<br>7 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
