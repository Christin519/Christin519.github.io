<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring整合MyBatis</title>
    <url>/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<h2 id="血与泪的教训"><a href="#血与泪的教训" class="headerlink" title="血与泪的教训"></a>血与泪的教训</h2><p><b style="color:red">之前少导了个依赖</b>        <b style="color:blue">spring-orm</b></p>
<a id="more"></a>

<h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><h3 id="开启注解支持"><a href="#开启注解支持" class="headerlink" title="开启注解支持"></a>开启注解支持</h3><p>spring配置文件中加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="一个接口"><a href="#一个接口" class="headerlink" title="一个接口"></a>一个接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getFirst</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="一个业务层"><a href="#一个业务层" class="headerlink" title="一个业务层"></a>一个业务层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> IAccountMapper accountMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//自动注入接口实现</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> accountMapper.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="一张表"><a href="#一张表" class="headerlink" title="一张表"></a>一张表</h3><p><img src="/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/User_tb.png" alt></p>
<h3 id="一个对应接口的xml文件"><a href="#一个对应接口的xml文件" class="headerlink" title="一个对应接口的xml文件"></a>一个对应接口的xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.czw.mapper.IAccountMapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--名称空间和接口全类名对应--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getFirst"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--方法也要对应方法名--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select username from user where user_id=1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="再续前缘"><a href="#再续前缘" class="headerlink" title="再续前缘"></a>再续前缘</h2><h3 id="首先，导好坐标"><a href="#首先，导好坐标" class="headerlink" title="首先，导好坐标"></a>首先，导好坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringLearning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--mysql驱动--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--spring核心之一--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--mybatis核心--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--数据源--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--MyBatis整合Spring核心--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--忘了干嘛的--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--spring对ORM框架的支持--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="然后，准备数据库连接"><a href="#然后，准备数据库连接" class="headerlink" title="然后，准备数据库连接"></a>然后，准备数据库连接</h3><p>准备外置database.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/learningssm?serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">password</span>=<span class="string">root</span></span></pre></td></tr></table></figure>

<p>在spring配置文件中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="最后，整合MyBatis"><a href="#最后，整合MyBatis" class="headerlink" title="最后，整合MyBatis"></a>最后，整合MyBatis</h3><p>在spring配置文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  根据配置文件得到SqlSessionFactory  --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  将接口实现注入IoC容器  --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.czw.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ApplicationContext ac= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//拿到IOC容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    IAccountService as= ac.getBean(<span class="string">"accountServiceImpl"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//拿到业务层对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(as);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(as.getFirst());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//调用方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/19/Spring%E6%95%B4%E5%90%88MyBatis/result.png" alt></p>
<p>NICE啊，舒服了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合MyBatis</title>
    <url>/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<h2 id="我真菜"><a href="#我真菜" class="headerlink" title="我真菜"></a>我真菜</h2><h3 id="被Spring整合MyBatis打击到了，所以转向Spring-Boot"><a href="#被Spring整合MyBatis打击到了，所以转向Spring-Boot" class="headerlink" title="被Spring整合MyBatis打击到了，所以转向Spring Boot"></a>被Spring整合MyBatis打击到了，所以转向Spring Boot</h3><p>我太菜了！！！</p>
<a id="more"></a>

<h2 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h2><p>一个User对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>		<span class="comment">//lombok插件简单粗暴</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String username;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String password;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>一张User表</p>
<p><img src="/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/User_tb.png" alt></p>
<p>字段名和属性名对应</p>
<h2 id="接口处理"><a href="#接口处理" class="headerlink" title="接口处理"></a>接口处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getFirst</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>启动类上开启扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.czw.springbootmybatis.mapper"</span>)</span></pre></td></tr></table></figure>

<p>XML文件编写SQL语句并映射到接口(mapper标签的namespace)且对应接口方法名(id)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.czw.springbootmybatis.mapper.IUserMapper"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;select id=<span class="string">"getFirst"</span> resultType=<span class="string">"String"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        select username from user where user_id = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;select id=<span class="string">"getById"</span> resultType=<span class="string">"com.czw.springbootmybatis.bean.User"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user where user_id = #&#123;userId&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/mapper&gt;</span></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/learningssm?serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#映射xml文件并实现下划线和大写转化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span></pre></td></tr></table></figure>

<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span><span class="comment">//存入IoC容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//自动注入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userMapper.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//调用方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userMapper.getById(id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//注入Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str=userService.getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    User user=userService.getById(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(user.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>可想而知</p>
<p><img src="/2020/02/18/Spring-Boot%E6%95%B4%E5%90%88MyBatis/result.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-0，舒服了，Spring Boot真好</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之再相会</title>
    <url>/2020/02/18/Spring%E6%98%A5%E4%B9%8B%E5%86%8D%E7%9B%B8%E4%BC%9A/</url>
    <content><![CDATA[<h2 id="基于注解的IOC"><a href="#基于注解的IOC" class="headerlink" title="基于注解的IOC"></a>基于注解的IOC</h2><blockquote>
<p>前提：加上名称空间(xmlns:context)，开启注解扫描</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.czw"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="ioc常用注解"><a href="#ioc常用注解" class="headerlink" title="ioc常用注解"></a>ioc常用注解</h3><h4 id="用于创建对象"><a href="#用于创建对象" class="headerlink" title="用于创建对象"></a>用于创建对象</h4><p>和bean标签功能一样</p>
<p>@component(value=”xxx”)：将对象存入spring容器，value属性表示bean的id，不写时默认类名(首字母小写)，只有一个value属性，可以不写value=。</p>
<p>子集：@Controller：表现层，@Service：业务层，@Repository：持久层</p>
<h4 id="用于注入数据"><a href="#用于注入数据" class="headerlink" title="用于注入数据"></a>用于注入数据</h4><p>和property标签功能一样</p>
<p>@Autowired：自动按照类型注入，根据变量类型找容器中对应的bean对象，如果是接口，则可以找实现类，只要容器中有唯一的bean对象和要注入的对象类型匹配，就可以注入。出现位置可以是变量，也可以是方法上。</p>
<blockquote>
<p>如果有多个bean满足类型时，先按照类型筛选，然后根据变量名确定，如果没有相同变量名，则报错。</p>
</blockquote>
<p>使用注解注入时，set方法就可以不用了。</p>
<p>@Qualifier：按照类型注入的基础上，再按照名称注入，在给类成员注入时，不能单独使用，在给方法参数注入时可以。</p>
<p>@Resource：直接按照bean的id注入，不依靠Autowired，name属性对应id。</p>
<blockquote>
<p>以上都只能注入其他bean类型，无法注入基本类型/String类型，集合类型只能通过xml。</p>
</blockquote>
<p>@Value：用于注入基本类型/String，value属性用于指定数值，可以使用SpEL表达式( ${表达式} )</p>
<h4 id="用于改变作用范围"><a href="#用于改变作用范围" class="headerlink" title="用于改变作用范围"></a>用于改变作用范围</h4><p>和scope属性功能一样</p>
<p>@Scope：用于指定bean作用范围，value属性表示取值，常用：单例(默认)/多例</p>
<h4 id="和生命周期相关"><a href="#和生命周期相关" class="headerlink" title="和生命周期相关"></a>和生命周期相关</h4><p>和init-method/destroy-method属性功能一样</p>
<p>@PreDestroy：指定销毁方法</p>
<p>@PostConstruct：指定初始化方法</p>
<h2 id="IOC案列"><a href="#IOC案列" class="headerlink" title="IOC案列"></a>IOC案列</h2><p>使用xml和注解实现单表CRUD</p>
<p>死在mybatis整合。。。</p>
<p>去学mybatis去了</p>
<h2 id="使用纯注解实现"><a href="#使用纯注解实现" class="headerlink" title="使用纯注解实现"></a>使用纯注解实现</h2><p>暂无</p>
<h2 id="Spring和Junit整合"><a href="#Spring和Junit整合" class="headerlink" title="Spring和Junit整合"></a>Spring和Junit整合</h2><p>暂无</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-2</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring春之初体验</title>
    <url>/2020/02/17/Spring%E6%98%A5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p>工厂模式+反射+配置文件</p>
<p>bean.properties配置文件</p>
<p>Beanfactory工厂类</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beanfactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化properties实例，用于装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//配置文件为beanName=beanPath的形式，beanPath为全限定类名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//静态代码块装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            InputStream is=Beanfactory.class.getResourceAsStream("bean.properties");</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//获取到resources文件夹下的bean.properties配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            prop.load(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过输入流获取配置文件加载到properties实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//通过方法获取beanName对应的bean对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object bean=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String beanPath=prop.getProperty(beanName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//获取beanName在配置文件中对应的beanPath</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bean=Class.forName(beanPath).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过反射用beanPath创建bean对象实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> bean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样一来，就不会频繁的new对象了，减少了对象之间的耦合。</p>
<h2 id="整成单例-恶汉式"><a href="#整成单例-恶汉式" class="headerlink" title="整成单例(恶汉式)"></a>整成单例(恶汉式)</h2><p>刚刚的代码，每次都会调用newInstance()方法，会创建多个对象。在这里将其改成单例模式，在加载的时候便将所有实例创建好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanfactorySingle</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化properties实例，装载配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//配置文件中为beanName=beanPath的形式，beanPath为全限定类名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//存放bean的容器&lt;beanName,bean对象&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            InputStream is=Beanfactory.class.getResourceAsStream("bean.properties");</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//获取到resources文件夹下的bean.properties配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            prop.load(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//通过输入流获取配置文件加载到properties实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            beans=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Enumeration keys=prop.keys();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//取出配置文件所有的key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String key=keys.nextElement().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//取出每个key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                String beanPath=prop.getProperty(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//获得每个key的value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object value=Class.forName(beanPath).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//根据全限定类名用反射创建实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                beans.put(key,value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//将所有beanName和bean实例存入容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//从beans容器中取出即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h2><p>将对象的创建控制权转接给了工厂，根据名字由工厂提供，每次需要对象的时候找工厂拿即可。</p>
<h2 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h2><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ClassPathXmlApplicationContext：可以加载类路径下的配置文件，要求配置文件必须在类路径下，不在就加载不了。</p>
<p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件(必须要有访问权限)。</p>
<p>AnnotationConfigApplicationContext：用于读取注解创建容器。</p>
<h3 id="引发的问题"><a href="#引发的问题" class="headerlink" title="引发的问题"></a>引发的问题</h3><p>ApplicationContext：构建核心容器时，立即加载配置文件中的内容。适用于单例对象。实际开发中多用这个接口。</p>
<p>BeanFacroty：采取的是懒加载的方式，当根据id获取对象时，才开始创建对象。适用于多例对象。</p>
<h2 id="bean的管理"><a href="#bean的管理" class="headerlink" title="bean的管理"></a>bean的管理</h2><h3 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h3><h4 id="1，用默认构造函数"><a href="#1，用默认构造函数" class="headerlink" title="1，用默认构造函数"></a>1，用默认构造函数</h4><p>使用bean标签，配置id和class属性，且没有其他标签和属性时，采用的是默认无参构造函数，如果没有就无法创建。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapper"</span> <span class="attr">class</span>=<span class="string">"com.czw.mapper.impl.AccountMapperImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="2，使用某个类中的方法创建"><a href="#2，使用某个类中的方法创建" class="headerlink" title="2，使用某个类中的方法创建"></a>2，使用某个类中的方法创建</h4><p>存在一个工厂类，类中有一个方法可以返回一个car对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> IAccountMapper <span class="title">getAccountMapper</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountMapperImpl();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时，将工厂存入容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"InstanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.czw.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapperByFactory"</span> <span class="attr">factory-bean</span>=<span class="string">"InstanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>通过指定工厂(InstanceFactory)的创建实例方法(getAccountMapper)得到需要的对象。</p>
<h4 id="3，使用静态工厂的静态方法"><a href="#3，使用静态工厂的静态方法" class="headerlink" title="3，使用静态工厂的静态方法"></a>3，使用静态工厂的静态方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapperStatic"</span> <span class="attr">class</span>=<span class="string">"com.czw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="bean作用范围"><a href="#bean作用范围" class="headerlink" title="bean作用范围"></a>bean作用范围</h3><p>bean对象默认是单例的，可以通过bean标签的scope属性修改</p>
<p>取值：</p>
<p>singleton(默认单例)，</p>
<p>prototype(多例)，</p>
<p>request(作用于web应用请求范围)，</p>
<p>session(作用于web应用会话范围)，</p>
<p>global-session(作用于集群环境的会话范围，当不是集群环境，相当于session)</p>
<h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><h4 id="1，单例对象"><a href="#1，单例对象" class="headerlink" title="1，单例对象"></a>1，单例对象</h4><p>容器创建时，对象出生。容器在，对象在。容器毁，对象死。和容器完全一致。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountMapper"</span> <span class="attr">class</span>=<span class="string">"省略"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>init()和destroy()为对象的初始化和销毁方法。</p>
<p>在容器创建时，init方法执行了。</p>
<p>可以不使用接口类型创建容器，而直接使用实现类创建，然后调用close方法手动关闭容器，此时发现容器销毁时，destroy方法执行了。</p>
<h4 id="2，多例对象"><a href="#2，多例对象" class="headerlink" title="2，多例对象"></a>2，多例对象</h4><p>使用对象时，spring才创建对象，使用过程中一直存活，spring不会销毁对象，当对象长时间不用，且没有别的对象引用时，由Java垃圾回收器回收。</p>
<h2 id="依赖注入-Dependency-Injection"><a href="#依赖注入-Dependency-Injection" class="headerlink" title="依赖注入( Dependency Injection)"></a>依赖注入( Dependency Injection)</h2><p>当需要用到其他类的对象，由spring提供，我们只需要在配置文件中说明。</p>
<p>能注入的类型：</p>
<p>基本类型和String，其他bean类型(在配置文件或注解配置过的)，复杂/集合类型</p>
<p>注入的方式：构造函数提供，set方法提供，注解提供</p>
<h3 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h3><p>在property标签里使用子标签：array，list，set，map，props</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"aList"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- array,set与这个一样--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"aMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"222"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- property与这个类似，entry改为prop，并且在两个prop标签中直接写内容--&gt;</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意：list结构的，map结构的，标签可以互换，比如list对象中用set标签，map对象中用props标签</p>
</blockquote>
<h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><p>经常变化的数据并不适用。</p>
<p>在bean标签内部，使用constructor-arg标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"hello.world.test"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"test"</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>type：要注入的数据类型</p>
<p>value：要注入的值(用于基本类型，String类型)</p>
<p>index：要注入的参数索引</p>
<p>name：要注入的参数名字(常用)</p>
<p>ref：注入关联的bean对象(当遇到value不能转换的类型时使用，比如日期，复杂类型)</p>
<blockquote>
<p>优势：获取bean对象时，注入数据是必须的操作，否则无法创建</p>
<p>缺点：改变了bean对象实例化的方式，使得在创建对象时，用不到这些参数也要提供。</p>
</blockquote>
<h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3><p>在bean标签内部，使用property标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"hello.world.test"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>czw<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>name对应的不是属性名称，而是set方法后的名称，调用set方法赋值。</p>
<blockquote>
<p>优势：创建对象时，没有明确限制，可以直接使用默认构造方法</p>
<p>缺点：如果某个变量必须有值，则获取对象时可能set方法没有执行</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射</title>
    <url>/2020/02/16/Java-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射作用"><a href="#反射作用" class="headerlink" title="反射作用"></a>反射作用</h2><p>1，反编译；2，通过反射机制访问类中的以下几个。</p>
<p>Class<T> 类，Constructor 构造方法，Field 属性，Method 方法，Modifier 修饰符 </T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;				<span class="comment">//Class</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;		<span class="comment">//Field</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;&#125;             <span class="comment">//Constructor</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;			<span class="comment">//Method</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(name+<span class="string">"正在工作。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="获取class类型对象的三种方式"><a href="#获取class类型对象的三种方式" class="headerlink" title="获取class类型对象的三种方式"></a>获取class类型对象的三种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);      <span class="comment">//第一种</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//c1引用保存内存地址指向堆中的对象，该对象代表Emp整个类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class c2=Emp<span class="class">.<span class="keyword">class</span></span>;                 <span class="comment">//第二种</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//java中每个类型都有class属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Emp e=<span class="keyword">new</span> Emp();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class c3=e.getClass();              <span class="comment">//第三种，c3是运行时类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//java中每个对象都有getClass方法</span></span></pre></td></tr></table></figure>

<p>Class.forName(“Emp”)；这是将Emp类装载到JVM虚拟机的过程，会执行静态语句块。</p>
<p>而Class c= Emp.class；不会执行。</p>
<h2 id="创建类的对象实例"><a href="#创建类的对象实例" class="headerlink" title="创建类的对象实例"></a>创建类的对象实例</h2><p>newInstance()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();	<span class="comment">//调用的是无参构造方法，Emp必须要有</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c.getDeclaredConstructor().newInstance();<span class="comment">//据说JDK9之后用这个方法</span></span></pre></td></tr></table></figure>

<h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><h3 id="反射获取类的属性"><a href="#反射获取类的属性" class="headerlink" title="反射获取类的属性"></a>反射获取类的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Field [] fs=c.getFields();		<span class="comment">//获取所有public修饰的属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getDeclaredFields()				<span class="comment">//获取所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Field f:fs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i=f.getModifiers()		<span class="comment">//返回属性修饰符(int类型，0-4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Modifiler.toString(i)		<span class="comment">//返回数字所对应的字符(public。。。)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class type=f.getType()		<span class="comment">//获取属性类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	type.getName()				<span class="comment">//获取类型名称(java.lang.String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    type.getSimpleName()		<span class="comment">//获取类型名称(String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	f.getName()					<span class="comment">//获取属性名字(name)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>综合起来，打印类的结构</p>
<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_f.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);<span class="comment">//获取类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Field[] fs= c.getDeclaredFields();		<span class="comment">//活获取类的所有属性集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(Modifier.toString(c.getModifiers())+<span class="string">" class "</span>+c.getName()+<span class="string">" &#123;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Field f:fs)&#123;		<span class="comment">//遍历所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">"\t"</span>+Modifier.toString(f.getModifiers())+<span class="string">" "</span>);<span class="comment">//修饰符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(f.getType().getSimpleName()+<span class="string">" "</span>);			<span class="comment">//属性类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(f.getName()+<span class="string">";\n"</span>);					<span class="comment">//属性名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_fc.png" alt></p>
<p>结果完美</p>
<p><strong>针对获取某一个属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Field fid=c.getDeclaredField(<span class="string">"id"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fid.setAccessible(<span class="keyword">true</span>);        <span class="comment">//打破封装，使其可以获取私有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();       <span class="comment">//得到Emp类的实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fid.set(o,<span class="number">100</span>);               	<span class="comment">//给对象o的id属性赋值100</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(fid.get(o));	<span class="comment">//获取o的id</span></span></pre></td></tr></table></figure>

<h3 id="反射获取类的方法"><a href="#反射获取类的方法" class="headerlink" title="反射获取类的方法"></a>反射获取类的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method [] ms=c.getMethods();	<span class="comment">//获取所有public修饰的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getDeclaredMethods()			<span class="comment">//获取所有方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Method m:ms)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i=m.getModifiers()		<span class="comment">//返回方法修饰符(int类型，0-4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Modifiler.toString(i)		<span class="comment">//返回数字所对应的字符(public。。。)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class type=m.getReturnType()<span class="comment">//获取方法返回值类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	type.getName()				<span class="comment">//获取返回值类型全称(java.lang.String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    type.getSimpleName()		<span class="comment">//获取返回值类型名称(String)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	m.getName()					<span class="comment">//获取方法名字(name)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class[] pts=getParameterTypes()<span class="comment">//获取方法参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pts[index].getSimpleName()					<span class="comment">//获取方法参数类型名称</span></span></pre></td></tr></table></figure>

<p>打印类的方法集</p>
<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_m.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method[] ms=c.getDeclaredMethods();		<span class="comment">//获取方法集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(Modifier.toString(c.getModifiers())+<span class="string">" class "</span>+c.getSimpleName()+<span class="string">" &#123;\n"</span>);			<span class="comment">//打印类信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Method m:ms)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">"\t"</span>+Modifier.toString(m.getModifiers())+<span class="string">" "</span>);<span class="comment">//方法修饰符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(m.getReturnType().getSimpleName()+<span class="string">" "</span>);<span class="comment">//方法返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(m.getName()+<span class="string">"("</span>);					<span class="comment">//方法名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class[] pts=m.getParameterTypes();		<span class="comment">//获取方法参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pts.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(pts[i].getSimpleName());	<span class="comment">//参数类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(i!=pts.length-<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">")&#123;&#125;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sb.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_mc.png" alt></p>
<p>结果同样完美</p>
<p><strong>获取某个特定方法并调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Method m1=c.getDeclaredMethod(<span class="string">"work"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//与属性不同，要加参数列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Method m2=c.getDeclaredMethod(<span class="string">"say"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">m1.setAccessible(<span class="keyword">true</span>);        	<span class="comment">//打破封装，使其可以获取私有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object o=c.newInstance();       <span class="comment">//得到Emp类的实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">m1.invoke(o,<span class="string">"ccc"</span>);				<span class="comment">//传入对象和对应参数，无返回值直接使用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object or=m2.invoke(o,<span class="string">"czw"</span>,<span class="number">999</span>);<span class="comment">//有返回值的用对象接受</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(or);			<span class="comment">//输出返回值</span></span></pre></td></tr></table></figure>

<h3 id="反射获取构造方法"><a href="#反射获取构造方法" class="headerlink" title="反射获取构造方法"></a>反射获取构造方法</h3><p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_c.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constructor[] cs=c.getConstructors();</span></pre></td></tr><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Constructor ctr:cs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(Modifier.toString(ctr.getModifiers())+<span class="string">" "</span>+c.getSimpleName()+<span class="string">"("</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class[] cpts=ctr.getParameterTypes();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cpts.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(cpts[i].getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(i!=cpts.length-<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(<span class="string">")&#123;&#125;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sb);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Java-%E5%8F%8D%E5%B0%84/Emp_cc.png" alt></p>
<p><strong>获取某个特定构造方法并创建对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c=Class.forName(<span class="string">"com.czw.reflect.Emp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constructor ctr=c.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">boolean</span>.<span class="title">class</span>)</span>;<span class="comment">//获取有参构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Object oc=ctr.newInstance(<span class="string">"ccc"</span>,<span class="number">18</span>,<span class="keyword">true</span>);<span class="comment">//这个newInstance属于ctr的有参构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(oc);<span class="comment">//打印对象</span></span></pre></td></tr></table></figure>

<h3 id="反射获取父类和实现接口"><a href="#反射获取父类和实现接口" class="headerlink" title="反射获取父类和实现接口"></a>反射获取父类和实现接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">sleep</span></span>&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class sc=c.getSuperclass();		<span class="comment">//获取父类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(sc.getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class[] ics=c.getInterfaces();	<span class="comment">//获取接口集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Class i:ics)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(i.getSimpleName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="反射的缺点"><a href="#反射的缺点" class="headerlink" title="反射的缺点"></a>反射的缺点</h2><p>反射是一种解释操作，性能上是有一定差距的，不如直接new对象。</p>
<p>反射可以获取到私有的属性和方法，所以有一点不安全。</p>
<h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>Java中的可变长参数，可以看作数组，如果有精准匹配的，则不会去执行可变长参数方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... t)</span></span>&#123;		<span class="comment">//参数个数是0-n个，记为方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;			<span class="comment">//记为方法2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"精准匹配"</span>+t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">test();<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test(<span class="number">1</span>)<span class="comment">//此时执行方法2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] is=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(is);<span class="comment">//执行方法1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//可变长参数只能出现一次，并且必须是最后一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... t，<span class="keyword">int</span> i)</span></span>&#123;		<span class="comment">//不可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span>... t)</span></span>&#123;		<span class="comment">//可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>xxx.properties：每行第一个符号(.不算)前的字符串作为键，之后作为值，键是唯一的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties p = <span class="keyword">new</span> Properties();</span></pre></td></tr><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"xxx.properties"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.load(fis);			<span class="comment">//通过输入流加载出配置文件内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">String value1=p.getProperty(<span class="string">"key1"</span>);	<span class="comment">//获取每一个键对应的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">String value2=p.getProperty(<span class="string">"key2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//然后便可以将值用来进行自定义配置</span></span></pre></td></tr></table></figure>

<p>这样增强了代码的灵活性，同样的代码，不同的配置，产生不同的效果，比如Spring Boot框架的配置文件就是这样。</p>
<blockquote>
<p>注意：在出现中文时，要处理好编码，免得发生乱码。</p>
</blockquote>
<p>使用反射+IO+properties配置文件联合应用，可以动态创建对象，在运行时才装载类，更加的灵活，降低了耦合度，增加了扩展性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><p>通过继承Thread类或者实现Runnable，Callable接口</p>
<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>构造方法：Thread()，Thread(String threadname)，</p>
<p>​                    Thread(Runnable target)，Thread(Runnable target，String threadname)</p>
<p>重写run()方法：包含线程运行逻辑</p>
<p>start()方法：开启多线程</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"这是run方法。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(i+<span class="number">1</span>+<span class="string">"只狼"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread tt=<span class="keyword">new</span> aThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tt.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"这是主程序  。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(i+<span class="number">1</span>+<span class="string">"只饺子"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>重写run()方法，同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread tr=<span class="keyword">new</span> Thread(<span class="keyword">new</span> bThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//Thread tr=new Thread(new bThread(),"trname");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//加上线程名称，可以在run方法中通过Thread.cunrrentThread.getName()获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr.start();</span></pre></td></tr></table></figure>

<p>实现Runnable接口可以资源共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"这是实现Runnable接口的run方法。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName()+count+<span class="string">"只狗"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="comment">//获取当前线程名+count值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//主程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Runnable run=<span class="keyword">new</span> bThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr1=<span class="keyword">new</span> Thread(run,<span class="string">"线程11111："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr2=<span class="keyword">new</span> Thread(run,<span class="string">"线程22222："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.start();</span></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_runnable.png" alt></p>
<p>两个线程共享同一个runnable实现类的count值，各自执行，不影响对方</p>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>新建：进程实例声明并创建，即new对象后</p>
<p>就绪：进程已准备好，可以被运行，即调用start()方法后</p>
<p>运行：线程被调度，分配好资源，即进入run()方法里</p>
<p>阻塞：被挂起或执行输入输出操作，即run()方法临时终止了执行</p>
<p>死亡：自然死亡：完成run()后或者抛出异常</p>
<p>强制死亡：执行stop()方法，线程被kill，断电，CPU爆炸等即线程结束</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_life.png" alt></p>
<h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p>Java属于抢占式调度模型</p>
<h3 id="线程优先级-1–10"><a href="#线程优先级-1–10" class="headerlink" title="线程优先级(1–10)"></a>线程优先级(1–10)</h3><p>MAX_PRIORITY            –10(最大)</p>
<p>MIN_PRIORITY            –1(最小)</p>
<p>NORM_PRIORITY        –5(默认) </p>
<p>getPriority()：返回线程优先级</p>
<p>setPriority(int newPriority)：改变线程优先级</p>
<p>注意：线程创建时继承父线程的优先级，优先级不是绝对，只是<strong>较大概率</strong>先运行优先级高的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable run=<span class="keyword">new</span> bThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr1=<span class="keyword">new</span> Thread(run,<span class="string">"线程11111："</span>);<span class="comment">//设置线程名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread tr2=<span class="keyword">new</span> Thread(run,<span class="string">"线程22222："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.setPriority(<span class="number">2</span>);						<span class="comment">//优先级大</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.setPriority(<span class="number">1</span>);						<span class="comment">//优先级小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tr1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">tr2.start();</span></pre></td></tr></table></figure>

<p>测了很多次终于出来的结果：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_priority.png" style="zoom:50%;"></td>
<td><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_priority_2.png" style="zoom:50%;"></td>
</tr>
</tbody></table>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>启动线程start()，（stop()：强制停止）</p>
<p>线程逻辑run()，</p>
<p>设置线程名setName(String name)，</p>
<p>获取线程名getName()，</p>
<p>返回当前线程的引用currentThread()，</p>
<p>判断线程是否活着isActive()</p>
<h4 id="yield-：static-void"><a href="#yield-：static-void" class="headerlink" title="yield()：static void"></a>yield()：static void</h4><p>线程让步，让优先级相同的先执行，但让步多长时间不固定，若没同优先级，此方法无效。</p>
<p>改造for循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;			<span class="comment">//当i=1时让步给其他线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.yield();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(Thread.currentThread().getName()+count+<span class="string">"只狗"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_yield.png" alt></p>
<p>线程2执行完一次i++后，i=1让步给线程1，线程1也执行一次i++后再让给线程2，然后继续</p>
<p>可是有时候测出来不是这样，不知道为什么</p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h4><p>当某个线程调用其他线程的join方法时，该线程被阻塞，直到用join()方法加入的线程执行完为止，低优先级也可以获得执行。</p>
<p>在主线程for循环中i=0时插入线程1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"这是主线程。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(i+<span class="number">1</span>+<span class="string">"只饺子"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			tr1.join();			<span class="comment">//先执行完tr1再继续循环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_join.png" alt></p>
<p>可以看到线程1的执行过程在主线程的循环中间，而线程2不受控制，说明主线程在调用了线程1的join方法后转去执行线程1，直到结束再回来执行主线程</p>
<h4 id="sleep-long-mills-：static-void"><a href="#sleep-long-mills-：static-void" class="headerlink" title="sleep(long mills)：static void"></a>sleep(long mills)：static void</h4><p>令当前线程在指定时间段内睡眠，使其它线程有机会被执行，时间过去后恢复原样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime start=LocalDateTime.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"即将进入睡眠。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread.sleep(<span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"睡眠完毕。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">LocalDateTime stop=LocalDateTime.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Duration duration = Duration.between(start,stop);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"花费时间："</span>+duration.toMillis()+<span class="string">"毫秒"</span>);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_sleep.png" alt></p>
<p>在即将进入睡眠语句输出后，隔了3000毫秒，睡眠完毕输出，并输出时间差，验证成功。</p>
<blockquote>
<p>如果在main方法中，如果new了一个Thread对象，然后调用了.sleep方法，其实睡眠的还是主线程，因为sleep是静态方法，对象.sleep相当于是类名.sleep，没有区别。</p>
</blockquote>
<h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>依靠异常处理机制，打断休眠，抛出异常，继续运行接下来的代码</p>
<h2 id="线程同步与死锁"><a href="#线程同步与死锁" class="headerlink" title="线程同步与死锁"></a>线程同步与死锁</h2><h3 id="同步问题-数据不唯一"><a href="#同步问题-数据不唯一" class="headerlink" title="同步问题(数据不唯一)"></a>同步问题(数据不唯一)</h3><p>两个线程同时向一个账户取钱，余额出现负数：</p>
<p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_tongbu.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程逻辑</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	acount.get(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//取钱操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String tname=Thread.currentThread().getName()+<span class="string">"操作---"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(tname+<span class="string">"账户原有："</span>+money+<span class="string">"，提款："</span>+m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(money&gt;=m)&#123;		<span class="comment">//余额充足</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"要取钱拉"</span>);	<span class="comment">//这四条纯粹为了加大出错的概率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"取钱拉"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"钱拉"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"拉"</span>);	</span></pre></td></tr><tr><td class="code"><pre><span class="line">        money-=m;		<span class="comment">//余额减少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(tname+<span class="string">"提款成功，账户余额："</span>+money);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(tname+<span class="string">"账户余额不足。。。"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(tname+<span class="string">"结束-----------------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>原因：当两个线程同时对一个账户进行取钱操作时，线程1判断余额充足后，继续接下来的操作，在还没到对余额进行修改时，线程2可能在此时判断余额充足，这就导致了两个线程同时完成了余额减少操作，金额变为负数，而这是不允许出现的。</p>
<p>解决办法：在一个线程执行对数据的操作时，其他线程不能执行。</p>
<h4 id="1，synchronized代码块-推荐使用"><a href="#1，synchronized代码块-推荐使用" class="headerlink" title="1，synchronized代码块(推荐使用)"></a>1，synchronized代码块(推荐使用)</h4><p>将需要同步的代码放在synchronized(这里是加锁的对象){这里是代码}代码块中</p>
<blockquote>
<p>这样这一段代码只有一个线程能执行，当t1执行到这段代码时，就会去找该对象的对象锁，如果找到，就进入代码块中执行，执行完后，归还对象锁。如果在t2在执行过程中也遇到了这段代码，也去找对象锁，发现该对象锁被t1持有，只能等待t1归还对象锁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">synchronized</span>(被锁对象)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//取钱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="2，synchronized关键字"><a href="#2，synchronized关键字" class="headerlink" title="2，synchronized关键字"></a>2，synchronized关键字</h4><p>在取钱操作get()方法上加上synchronized关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//取钱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>synchronized关键字锁的不是方法，而是对象。</strong></p>
<p>比如新加一个同样的get2()方法，然后改造run()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"wechat"</span>.equals(Thread.currentThread().getName()))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    acount.get2(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    acount.get(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当线程为wechat时执行get2()，线程为alipay时执行get()，发现其中一个还是只能等待另一个线程结束才能执行。</p>
<p> <strong>当两个线程操作的对象不一样时，就锁不了。</strong></p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/2020/02/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/th_tongbu2.png" alt></p>
<p>加上关键字后，发现微信执行完之后，支付宝才能执行，此时就达到了目的。</p>
<blockquote>
<p>注意：在静态方法上加锁时，对于所有的对象都是同一个锁，这个锁就称为类锁，即该类所有对象都是同一把锁。当执行到带synchronized关键字的静态方法时，会去找类锁，哪怕操作不同对象时也要等待拥有类锁的线程执行完。</p>
</blockquote>
<h3 id="死锁问题-永远等待"><a href="#死锁问题-永远等待" class="headerlink" title="死锁问题(永远等待)"></a>死锁问题(永远等待)</h3><p>著名的哲学家吃饭问题，n个人围成圆桌，总共有n根筷子，与哲学家插空放置。哲学家想要吃饭，必须拿两根筷子，当每个哲学家拿起左边的筷子时，再去拿右边的筷子，此时筷子已经被右边的哲学家拿走，此时陷入死锁状态。</p>
<p>线程T1先拿到o1的对象锁，然后想接着拿o2的对象锁，而线程T2相反。由于两个线程同步执行，所以会出现，线程T1拿到了o1的锁，同时线程T2拿到了o2的锁，形成了互相等待对方执行完成的局面，而双方都不可能执行完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object o2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">T1</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.o1=o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.o2=o2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (o1)&#123;		<span class="comment">//线程T1先拿到o1对象锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了o1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;			<span class="comment">//短暂延时，引起问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">synchronized</span> (o2)&#123;	<span class="comment">//接着拿o2对象锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>线程T2与线程T1类似，只是先拿o2再拿o1。</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>所有的用户线程(以上都是)结束生命周期，守护线程才会结束，例如Java中的垃圾回收器。</p>
<p>守护线程一般都是无限执行的。</p>
<p>setDaemon(true)方法可以将用户线程设置为守护线程</p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>Timer：每隔一段固定时间执行任务</p>
<p>schedule(TimeTask task，Date firstTime，long perlod)：指定定时任务</p>
<p>task：任务，firstTime：起始时间，perlod，间隔时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">TimeTask</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.pritln(<span class="string">"..."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS服务器体验</title>
    <url>/2020/02/12/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>配置：2核4G内存1Mbps带宽</p>
<p>系统：CentOS7.7</p>
<h2 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h2><p>重置密码，修改主机名、实例名，设置安全组(80，443，3306等)</p>
<p>Xshell连接服务器</p>
<a id="more"></a>

<h3 id="宝塔面板安装-开放8888端口"><a href="#宝塔面板安装-开放8888端口" class="headerlink" title="宝塔面板安装(开放8888端口)"></a>宝塔面板安装(开放8888端口)</h3><p>用来管控还是挺好的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span></pre></td></tr></table></figure>

<p>傻瓜式选择LNMP(Linux，Nginx1.16，MySQL5.6，PHP5.6)一键安装</p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置仓库</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span></pre></td></tr><tr><td class="code"><pre><span class="line">配置镜像源</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">安装docker-ce</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span></pre></td></tr><tr><td class="code"><pre><span class="line">启动</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start docker</span></pre></td></tr><tr><td class="code"><pre><span class="line">查看版本</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker version</span></pre></td></tr></table></figure>

<h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">2、拉取镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">3、根据镜像启动容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run --name mytomcat -d tomcat:latest</span></pre></td></tr><tr><td class="code"><pre><span class="line">4、docker ps  </span></pre></td></tr><tr><td class="code"><pre><span class="line">查看运行中的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">5、 停止运行中的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker stop  容器的id</span></pre></td></tr><tr><td class="code"><pre><span class="line">6、查看所有的容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker ps -a</span></pre></td></tr><tr><td class="code"><pre><span class="line">7、启动容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker start 容器id</span></pre></td></tr><tr><td class="code"><pre><span class="line">8、删除一个容器</span></pre></td></tr><tr><td class="code"><pre><span class="line"> docker rm 容器id</span></pre></td></tr><tr><td class="code"><pre><span class="line">9、启动一个做了端口映射的tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span></pre></td></tr><tr><td class="code"><pre><span class="line">-d：后台运行</span></pre></td></tr><tr><td class="code"><pre><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">10、为了演示简单关闭了linux的防火墙</span></pre></td></tr><tr><td class="code"><pre><span class="line">service firewalld status ；查看防火墙状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">service firewalld stop：关闭防火墙</span></pre></td></tr><tr><td class="code"><pre><span class="line">11、查看容器的日志</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker logs container-name/container-id</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">更多命令参看</span></pre></td></tr><tr><td class="code"><pre><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span></pre></td></tr><tr><td class="code"><pre><span class="line">可以参考每一个镜像的文档</span></pre></td></tr></table></figure>

<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span></pre></td></tr></table></figure>

<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql退出了</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//错误日志</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker logs 42f09819908b</span></pre></td></tr><tr><td class="code"><pre><span class="line">error: database is uninitialized and password option is not specified </span></pre></td></tr><tr><td class="code"><pre><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span></pre></td></tr></table></figure>

<p>几个其他的高级操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span></pre></td></tr><tr><td class="code"><pre><span class="line">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span></pre></td></tr><tr><td class="code"><pre><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span></pre></td></tr><tr><td class="code"><pre><span class="line">指定mysql的一些配置参数</span></pre></td></tr></table></figure>

<h3 id="redis-in-docker"><a href="#redis-in-docker" class="headerlink" title="redis in docker"></a>redis in docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name 名字 -p 6379:6379 -d redis --requirepass &quot;密码&quot;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器相关</category>
      </categories>
      <tags>
        <tag>Aliyun</tag>
        <tag>docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流</title>
    <url>/2020/02/10/Java-IO%E6%B5%81/</url>
    <content><![CDATA[<h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>文件流(基于硬盘，速度慢，名字里带File)，缓冲流(走内存，速度快，名字里带Buffer)</p>
<p>字节流/字符流：In(Out)putStream，Reader/Writer</p>
<p>转换流：InputStreamReader/OutputStreamWriter</p>
<p>标准输入输出流</p>
<p>打印流：PrintSream，PrintWriter</p>
<p>数据流：DataInputStream，DataOutputStream</p>
<p>对象流：ObjectInputStream，ObjectOutputStream   –涉及序列化/反序列化</p>
<p>随机存取文件流：RandomAccessFile(随机意思是人为可操控，而不是电脑随机)</p>
<a id="more"></a>

<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下"><a href="#能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下" class="headerlink" title="能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下"></a>能新建，删除，重命名文件或目录，不能访问文件本身，常用方法如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile=<span class="keyword">new</span> File(<span class="string">"/testfprder/test.txt"</span>);			<span class="comment">//相对路径(文件)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile3=<span class="keyword">new</span> File(<span class="string">"/testfprder/aforder"</span>);			<span class="comment">//相对路径(目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">File newfile2=<span class="keyword">new</span> File(<span class="string">"/testfprder/"</span>,<span class="string">"test.txt"</span>);		<span class="comment">//父路径+文件名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//获取信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getName()				<span class="comment">//获取文件或目录名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getPath()				<span class="comment">//获取new的时候的路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getAbsolutePath()		<span class="comment">//获取绝对路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getAbsoluteFile()		<span class="comment">//返回一个用绝对路径new的File对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.getParent()				<span class="comment">//返回父级路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.renameTo(<span class="keyword">new</span> File())	<span class="comment">//重命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.exists()				<span class="comment">//判断文件是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.canRead()				<span class="comment">//是否可读(对应canWrite()是否可写)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.isFile()				<span class="comment">//是否是文件(对应有isDerectory()是否是目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.lastModified()			<span class="comment">//最后修改事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.length()				<span class="comment">//文件长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//增删查</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.createNewFile()			<span class="comment">//创建文件，需捕获异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.delete()				<span class="comment">//删除文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.mkdir()					<span class="comment">//创建目录(直接mkdirs()创建多层目录)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.list()				<span class="comment">//列出所有目录下的文件/子目录(返回String[]类型)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">newfile.listFiles()				<span class="comment">//同上，返回File[]类型数组</span></span></pre></td></tr></table></figure>

<h4 id="递归遍历文件目录"><a href="#递归遍历文件目录" class="headerlink" title="递归遍历文件目录"></a>递归遍历文件目录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(File file)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(file.isFile())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getAbsolutePath()+<span class="string">"是文件"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getAbsolutePath()+<span class="string">"是目录"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File[] fs=file.listFiles();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(fs!=<span class="keyword">null</span>&amp;&amp;fs.length&gt;<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(File f:fs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                listAll(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/file_listall.png" alt></p>
<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">byte</span>[] bt=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];				<span class="comment">//每次8个字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ((len=fis.read(bt))!=-<span class="number">1</span>)&#123;		<span class="comment">//直到最后一个字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="keyword">new</span> String(bt,<span class="number">0</span>,len));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"len："</span>+len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"----------------------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="keyword">new</span> String(bt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fis.png" alt></p>
<h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"testforder/good.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str=<span class="string">"talk is cheap,show me your code"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.write(str.getBytes());		<span class="comment">//写到内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.flush();					<span class="comment">//刷新，将内存写入硬盘</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fos.png" alt></p>
<h5 id="字节流复制文件"><a href="#字节流复制文件" class="headerlink" title="字节流复制文件"></a>字节流复制文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileCopy</span><span class="params">(String inpath,String outPath)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(inpath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">byte</span>[] bt=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ((len=fis.read(bt))!=-<span class="number">1</span>)&#123;		<span class="comment">//读取文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos.write(bt,<span class="number">0</span>,len);			<span class="comment">//写入内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fos.flush();						<span class="comment">//刷新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fos.close();						<span class="comment">//关闭流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//调用方法，传入参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fileCopy(<span class="string">"testforder/good.txt"</span>,<span class="string">"testforder/aforder/good.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fileCopy(<span class="string">"testforder/beautiful.jpg"</span>,<span class="string">"testforder/aforder/good.jpg"</span>);</span></pre></td></tr></table></figure>

<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_fcopy.png" alt></p>
<h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>与字节流差不多，不过针对字符，不像字节流可以操作所有类型文件(图片，压缩包，等等)</p>
<p>FileInputStream对应FileReader，FileOutputStream对应FileWriter</p>
<p>byte[] 字节数组对应char[] 字符数组</p>
<p>其他都一样</p>
<h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><p>先把数据缓冲到内存中，然后在内存中进行io操作，速度快很多。</p>
<p>将File替换成Buffer即可，并要事先new FileInputStream()对象(输出流同理，注意flush)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"/testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">BufferInputStream bis=<span class="keyword">new</span> BufferInputStream(fis);</span></pre></td></tr><tr><td class="code"><pre><span class="line">......</span></pre></td></tr><tr><td class="code"><pre><span class="line">bis.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">fis.close();</span></pre></td></tr></table></figure>

<h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p>字节流与字符流互相转换，当字节流数据都是字符时，转换成字符流，提高效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"/testforder/test.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(fis,<span class="string">"utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//接下来isr即可当Reader字符流使用，编码要与读取文件编码一致，记事本默认GBK</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">......</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//一样的操作</span></span></pre></td></tr></table></figure>

<h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>Data替换File，构造方法与缓冲流类似，输出流输出到文件中不能直接辨认，是乱码，需要通过输入流读出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readBoolean(),readInt(),readDouble()</span></pre></td></tr><tr><td class="code"><pre><span class="line">writeBoolean(),wirteInt(),writeDouble()		<span class="comment">//方法一一对应</span></span></pre></td></tr></table></figure>

<h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4><p>将对象转换成二进制进行网络传输</p>
<p>序列化：将对象写入IO流，</p>
<p>反序列化：从IO流中恢复成对象</p>
<p>需要对象实现Serializable接口(或者Externalizable，用的少)</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/io_serializable.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSerialize</span> <span class="params">(String path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">"jack"</span>,<span class="number">18</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"序列化："</span>+p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.writeObject(p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDeserialize</span> <span class="params">(String path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person p=(Person) ois.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"反序列化后："</span>+p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ois.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            testSerialize(<span class="string">"testforder/aforder/bforder/ohuo.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            testDeserialize(<span class="string">"testforder/aforder/bforder/ohuo.txt"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>运行结果：文本中</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/xuliehua.png" alt></p>
<p>控制台</p>
<p><img src="/2020/02/10/Java-IO%E6%B5%81/fanxuliehua.png" alt></p>
<p>注意：序列化和反序列化的类名，包名，结构必须完全一致。</p>
<h4 id="随机存取流"><a href="#随机存取流" class="headerlink" title="随机存取流"></a>随机存取流</h4><p>省略。。。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易HashMap</title>
    <url>/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/</url>
    <content><![CDATA[<h3 id="一，关于哈希表-Hash-Table"><a href="#一，关于哈希表-Hash-Table" class="headerlink" title="一，关于哈希表(Hash Table)"></a>一，关于哈希表(Hash Table)</h3><p>定义：<a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/数据结构/1450" target="_blank" rel="noopener">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<a href="https://baike.baidu.com/item/散列函数/2366288" target="_blank" rel="noopener">散列函数</a>，存放记录的<a href="https://baike.baidu.com/item/数组/3794097" target="_blank" rel="noopener">数组</a>叫做<a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>。</p>
<p>​        给定表H，存在函数hash(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表H为<strong>哈希(Hash）表</strong>，函数hash(key)为<strong>哈希(Hash) 函数</strong>。</p>
<a id="more"></a>

<p>哈希函数考虑因素：计算哈希函数所需时间，关键字的长度，哈希表的大小，关键字的分布情况，记录的查找频率。</p>
<p>常用方法：</p>
<p><strong>直接定址法</strong>：直接以关键字k或者k加上某个常数（k+c）作为哈希地址。</p>
<p><strong>数字分析法</strong>：提取关键字中取值比较均匀的数字作为哈希地址。</p>
<p><strong>除留余数法</strong>：用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。</p>
<p><strong>分段叠加法</strong>：按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>
<p><strong>平方取中法</strong>：如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。</p>
<p><strong>伪随机数法</strong>：采用一个伪随机数当作哈希函数。</p>
<h3 id="二，关于哈希冲突：不同key值得到相同地址"><a href="#二，关于哈希冲突：不同key值得到相同地址" class="headerlink" title="二，关于哈希冲突：不同key值得到相同地址"></a>二，关于哈希冲突：不同key值得到相同地址</h3><p>解决办法：</p>
<ul>
<li>开放定址法：开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li><strong>链地址法</strong>：将哈希表的每个单元作为链表的头结点，所有哈希地址为i的元素构成一个同义词链表。即发生冲突时就把该关键字链在以该单元为头结点的链表的尾部。</li>
<li>再哈希法：当哈希地址发生冲突用其他的函数计算另一个哈希函数地址，直到冲突不再产生为止。</li>
<li>建立公共溢出区：将哈希表分为基本表和溢出表两部分，发生冲突的元素都放入溢出表中。</li>
</ul>
<h3 id="三，关于HashMap"><a href="#三，关于HashMap" class="headerlink" title="三，关于HashMap"></a>三，关于HashMap</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​        基于哈希表的 Map 接口的实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了不同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。另外，HashMap是非线程安全的，也就是说在多线程的环境下，可能会存在问题，而Hashtable是线程安全的。</p>
<p>​        HashMap 的实例有两个参数影响其性能：初始容量 和加载因子。容量是<a href="https://baike.baidu.com/item/哈希表" target="_blank" rel="noopener">哈希表</a>中桶的数量，初始容量只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。在Java中，加载因子默认值为0.75，默认初始容量为16 。</p>
<p>​        <strong>HashMap是线程不安全的，线程安全用ConcurrentHashMap</strong></p>
<h4 id="解决冲突方法"><a href="#解决冲突方法" class="headerlink" title="解决冲突方法"></a>解决冲突方法</h4><p>​        在Java中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；而链表的特点是：寻址困难，插入和删除容易。上面我们提到过，常用的哈希函数的冲突解决办法中有一种方法叫做链地址法，其实就是将数组和链表组合在一起，发挥了两者的优势，我们可以将其理解为链表的数组。</p>
<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashtable.png" alt></p>
<h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>​        在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从<code>O(1)</code>降低到<code>O(n)</code>。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从<code>O(n)</code>提高到<code>O(logn)</code>。</p>
<p>​        如果恶意程序知道我们用的是Hash算法，则在纯链表情况下，它能够发送大量请求导致哈希碰撞，然后不停访问这些key导致HashMap忙于进行线性查找，最终陷入瘫痪，即形成了拒绝服务攻击（DDoS）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;				<span class="comment">//JDK1.7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;		<span class="comment">//JDK1.8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span> index = hash &amp; (tab.length-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>​        在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的。以上方法得到的int的hash值，然后再通过<code>h &amp; (table.length -1)</code>来得到该对象在数据中保存的位置。</p>
<p>​        当链表长度大于等于8的时候将链表转换为红黑树，利用红黑树的特点(查找、插入、删除的时间复杂度最坏为O(logn))，可以提高HashMap的性能。当节点个数少于6个的时候，又会将红黑树转化为链表。</p>
<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashmap_jdk8.webp" alt></p>
<h3 id="四，开始"><a href="#四，开始" class="headerlink" title="四，开始"></a>四，开始</h3><h4 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h4><p>​        –添加数据，获取键对应值</p>
<h4 id="构建节点"><a href="#构建节点" class="headerlink" title="构建节点"></a>构建节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeC</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;		<span class="comment">//hash值（存储位置）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> K key;		<span class="comment">//键</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    V value;			<span class="comment">//值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K, V&gt; next;	<span class="comment">//下一节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC(<span class="keyword">int</span> hash, K key, V value, NodeC&lt;K, V&gt; next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.hash = hash;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.key = key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.value = value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.next = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="构造HashMap"><a href="#构造HashMap" class="headerlink" title="构造HashMap"></a>构造HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapC</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> size;						<span class="comment">//长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K,V&gt; table[];				<span class="comment">//数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapC</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table=<span class="keyword">new</span> NodeC[<span class="number">16</span>];		<span class="comment">//默认长度16（2的整数次幂）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="哈希函数-1"><a href="#哈希函数-1" class="headerlink" title="哈希函数"></a>哈希函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;		<span class="comment">//JDK8同款</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> index = hash &amp; (table.length-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//System.out.println("hash值为："+index);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="添加数据-put-K-k-V-v"><a href="#添加数据-put-K-k-V-v" class="headerlink" title="添加数据[put(K k,V v)]"></a>添加数据[put(K k,V v)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K k,V v)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> h=hash(k);						<span class="comment">//计算哈希值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        NodeC nc=<span class="keyword">new</span> NodeC(h,k,v,<span class="keyword">null</span>);		<span class="comment">//新建节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        NodeC temp=table[h];				<span class="comment">//找到该节点对应位置的链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Boolean flag=<span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(temp==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            table[h]=nc;					<span class="comment">//该链表暂时没有数据，将节点放入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (temp!=<span class="keyword">null</span>)&#123;				<span class="comment">//遍历链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(temp.key==k)&#123;			<span class="comment">//发现同一个键，覆盖value值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    temp.value=v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    flag=<span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(temp.next==<span class="keyword">null</span>)&#123;		<span class="comment">//没有下一个节点，结束遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp=temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next=nc;				<span class="comment">//为新元素，加载表尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="获取key值对应的value值-get-K-k"><a href="#获取key值对应的value值-get-K-k" class="headerlink" title="获取key值对应的value值[get(K k)]"></a>获取key值对应的value值[get(K k)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h=hash(key);						<span class="comment">//计算哈希值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NodeC&lt;K,V&gt; temp=table[h];				<span class="comment">//找到链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (temp!=<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (temp.key==key) &#123;				<span class="comment">//找到键，返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> temp.value;				</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp=temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;							<span class="comment">//没找到，返回null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="重写toString方法便于观察"><a href="#重写toString方法便于观察" class="headerlink" title="重写toString方法便于观察"></a>重写toString方法便于观察</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    StringBuilder result=<span class="keyword">new</span> StringBuilder(<span class="string">"&#123;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;			<span class="comment">//从第一个链表开始遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(table[i]==<span class="keyword">null</span>)&#123;						<span class="comment">//跳过空节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (table[i]!=<span class="keyword">null</span>) &#123;			<span class="comment">//遍历链表所有节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                result.append(table[i].key+<span class="string">" = "</span>+table[i].value+<span class="string">"，"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                table[i]=table[i].next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!result.equals(<span class="string">"&#123;"</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.setCharAt(result.length()-<span class="number">1</span>,<span class="string">'&#125;'</span>);<span class="comment">//删除最后的逗号</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.append(<span class="string">"&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="五，测试方法"><a href="#五，测试方法" class="headerlink" title="五，测试方法"></a>五，测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HashMapC&lt;Integer,String&gt; hmc=<span class="keyword">new</span> HashMapC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">1</span>,<span class="string">"一"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">2</span>,<span class="string">"二"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">3</span>,<span class="string">"三"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">4</span>,<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">17</span>,<span class="string">"十七"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">18</span>,<span class="string">"十八"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">33</span>,<span class="string">"三十三"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc.put(<span class="number">1</span>,<span class="string">"111"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">18</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.get(<span class="number">33</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"end..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc.size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HashMapC&lt;String,Integer&gt; hmc2=<span class="keyword">new</span> HashMapC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"a"</span>,<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"b"</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"k"</span>,<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hmc2.put(<span class="string">"z"</span>,<span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"a"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"b"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"k"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2.get(<span class="string">"z"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(hmc2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/2020/02/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93HashMap/hashmap_result.png" alt></p>
<h3 id="六，总结"><a href="#六，总结" class="headerlink" title="六，总结"></a>六，总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易LinkedList</title>
    <url>/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/</url>
    <content><![CDATA[<p>​        LinkedList属于List接口的实现类之一，与ArrayList不同之处是采用的存储结构不同，ArrayList的数据结构为线性表，而LinkedList数据结构是链表。链表数据结构的特点是每个元素分配的空间不必连续、插入和删除元素时速度非常快、但访问元素的速度较慢。LinkedList是一个双向链表, 当数据量很大或者操作很频繁的情况下，添加和删除元素时具有比ArrayList更好的性能。但在元素的查询和修改方面要弱于ArrayList。LinkedList类每个结点用内部类Node表示，LinkedList通过first和last引用分别指向链表的第一个和最后一个元素，当链表为空时，first和last都为NULL值。</p>
<a id="more"></a>

<h3 id="一，关于链表"><a href="#一，关于链表" class="headerlink" title="一，关于链表"></a>一，关于链表</h3><table>
<thead>
<tr>
<th>类型</th>
<th>包含节点</th>
<th>第一和最后节点指向</th>
</tr>
</thead>
<tbody><tr>
<td>单向链表</td>
<td>尾节点</td>
<td>尾的next=&gt;null</td>
</tr>
<tr>
<td>单向循环链表</td>
<td>尾节点</td>
<td>尾的next=&gt;头</td>
</tr>
<tr>
<td>双向链表</td>
<td>头，尾节点</td>
<td>每个节点头尾各自对应前后元素，first和last的prev/next对应null</td>
</tr>
<tr>
<td>双向循环链表</td>
<td>头，尾节点</td>
<td>last的next=&gt;first，first的next=&gt;last</td>
</tr>
</tbody></table>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/single_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/single_for_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/double_list.webp" alt></p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/double_for_list.webp" alt></p>
<h3 id="二，关于LinkedList"><a href="#二，关于LinkedList" class="headerlink" title="二，关于LinkedList"></a>二，关于LinkedList</h3><p>LinkedList 是一个继承于AbstractSequentialList的<strong>双向循环链表</strong>。它也可以被当作堆栈、队列或双端队列进行操作。<br>LinkedList 实现 List 接口，能对它进行<strong>队列</strong>操作。<br>LinkedList 实现 Deque 接口，即能将LinkedList当作<strong>双端队列</strong>使用。<br>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能<strong>克隆</strong>。<br>LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持<strong>序列化</strong>，能通过序列化去传输。<br>LinkedList 是<strong>非同步</strong>的。</p>
<h3 id="三，实现的功能"><a href="#三，实现的功能" class="headerlink" title="三，实现的功能"></a>三，实现的功能</h3><p>​        –尾部添加，索引查找，索引插入，索引修改，索引删除</p>
<h3 id="四，构建节点"><a href="#四，构建节点" class="headerlink" title="四，构建节点"></a>四，构建节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;		<span class="comment">//作为LinkedListC的内部类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; prev;	<span class="comment">//头节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    E data;			<span class="comment">//数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; next;	<span class="comment">//尾节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.prev = prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.data = data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.next = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="五，构建LinkedList"><a href="#五，构建LinkedList" class="headerlink" title="五，构建LinkedList"></a>五，构建LinkedList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListC</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size=<span class="number">0</span>;		<span class="comment">//链表长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;	<span class="comment">//首部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;	<span class="comment">//尾部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span>				<span class="comment">//重写toString方法，便于观察</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder llc=<span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(first.data+<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.setCharAt(llc.length()-<span class="number">1</span>,<span class="string">']'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            llc.append(<span class="string">"]"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> llc.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="六，方法的编写"><a href="#六，方法的编写" class="headerlink" title="六，方法的编写"></a>六，方法的编写</h3><h4 id="获取索引所代表的节点-getNode-int-index"><a href="#获取索引所代表的节点-getNode-int-index" class="headerlink" title="获取索引所代表的节点[getNode(int index)]"></a>获取索引所代表的节点[getNode(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;			<span class="comment">//分成了前后两部分，提高效率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"索引越界："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index&lt;=size/<span class="number">2</span>)&#123;				<span class="comment">//前半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//后半部分节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size-index-<span class="number">1</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                node=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="尾部添加-add-E-e"><a href="#尾部添加-add-E-e" class="headerlink" title="尾部添加[add(E,e)]"></a>尾部添加[add(E,e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node&lt;E&gt; node=<span class="keyword">new</span> Node&lt;E&gt;(e);	<span class="comment">//新建节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;				<span class="comment">//第一次添加，设置头尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;							<span class="comment">//其他添加，尾部插入新节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            							<span class="comment">//并改变first的prev指向和last</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            last.next=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first.prev=last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;							<span class="comment">//长度+1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引添加-insert-int-index-E-e"><a href="#索引添加-insert-int-index-E-e" class="headerlink" title="索引添加[insert(int index,E e)]"></a>索引添加[insert(int index,E e)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);		<span class="comment">//获取索引的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node newnode=<span class="keyword">new</span> Node(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) &#123;			</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev = node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.next = node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev = node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.prev = newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;							<span class="comment">//只有一个节点的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            newnode.prev=node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node.next=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//如果是第一个节点，将其设为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=newnode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引查询-get-int-index"><a href="#索引查询-get-int-index" class="headerlink" title="索引查询[get(int index)]"></a>索引查询[get(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> getNode(index).data.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引修改-set-int-index"><a href="#索引修改-set-int-index" class="headerlink" title="索引修改[set(int index)]"></a>索引修改[set(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"即将将索引为"</span>+index+<span class="string">"的数改为"</span>+e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        getNode(index).data=e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="索引删除-remove-int-index"><a href="#索引删除-remove-int-index" class="headerlink" title="索引删除[remove(int index)]"></a>索引删除[remove(int index)]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node node=getNode(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"要删除的索引是："</span>+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>)&#123;				<span class="comment">//不止一个时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_prev=node.prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Node node_next=node.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_prev.next=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node_next.prev=node_prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;					<span class="comment">//第一个时，设置为first</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                first=node_next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;								<span class="comment">//只有一个时，恢复出厂设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            first=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size--;								<span class="comment">//长度-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h3 id="七，测试过程"><a href="#七，测试过程" class="headerlink" title="七，测试过程"></a>七，测试过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LinkedListC&lt;Integer&gt; li= <span class="keyword">new</span> LinkedListC&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(li.toString());<span class="comment">//检验toString方法，此时为空链表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.add(<span class="number">1</span>);				<span class="comment">//添加一个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行add方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.set(<span class="number">0</span>,<span class="number">9</span>);			<span class="comment">//将刚刚的1修改为9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行set方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行get方法后："</span>+li.get(<span class="number">0</span>));	<span class="comment">//获取第一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.remove(<span class="number">0</span>);			<span class="comment">//移除那个1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行remove方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        li.insert(<span class="number">0</span>,<span class="number">5</span>);		<span class="comment">//在那个1的地方插入5(由于已经被移除，所以不存在0索引将抛出异常)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"执行insert方法后："</span>+li.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2020/02/08/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93LinkedList/test_result.png" alt></p>
<h3 id="八，总结"><a href="#八，总结" class="headerlink" title="八，总结"></a>八，总结</h3><p>头发-1</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios综合练习(Cplayer播放器)</title>
    <url>/2020/02/07/Vue-Axios%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0-Cplayer%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h3 id="歌曲，评论，MV均来自网易云"><a href="#歌曲，评论，MV均来自网易云" class="headerlink" title="歌曲，评论，MV均来自网易云"></a>歌曲，评论，MV均来自网易云</h3><p><a href="/VueLearning/Cplayer.html">&gt;播放器点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Axios小练习(记事本，城市天气查询)</title>
    <url>/2020/02/06/Vue-Axios%E5%B0%8F%E7%BB%83%E4%B9%A0-%E8%AE%B0%E4%BA%8B%E6%9C%AC%EF%BC%8C%E5%9F%8E%E5%B8%82%E5%A4%A9%E6%B0%94%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><a href="/jishiben.html" target="ifr">&gt;记事本点这里&lt;</a></p>
<p><a href="/axios_learning.html" target="ifr">&gt;天气查询点这里&lt;</a></p>
<iframe src name="ifr" width="800px" height="336px" marginwidth="0" marginheight="0" frameborder="0" margin="0" style="background:pink;border-radius:5px;"></iframe>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础指令学习</title>
    <url>/2020/02/05/Vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="/VueLearning/vuejichu.html">&gt;具体网页点这里&lt;</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一则随机笑话(每20s刷新)</title>
    <url>/2020/02/04/%E4%B8%80%E5%88%99%E9%9A%8F%E6%9C%BA%E7%AC%91%E8%AF%9D-%E6%AF%8F20s%E5%88%B7%E6%96%B0/</url>
    <content><![CDATA[<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script type="text/javascript" src="/js/random-joke.js"></script>

<h4 id="joke" style="color:red">随机笑话在这显示，如果你一直都能看到这句话，说明我出BUG了

</h4>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot入门</title>
    <url>/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h2><p>​        对于一个刚学了9天，且仅仅了解一点点Spring，SpringMVC的人来说，Spring Boot是Spring和SpringMVC的自动配置版，容易上手，只需导入相关模块的启动器，就可以使用，免去了大量xml文件的配置，并且内嵌了Tomcat(默认)，Jetty，Undertow。省去了配tomcat的烦恼。spring boot大量使用注解的方式进行开发，也可以通过重写配置类修改默认配置，非常的便捷。并且spring boot可以整合其他优秀的框架和技术。</p>
<p>​        这9天使用spring boot 2.2.2版本进行学习，看了一些视频，看了一些博客，还翻了官方文档，算是有了一个初步的了解。</p>
<a id="more"></a>

<hr>
<h2 id="Spring-Boot初体验之Hello-World"><a href="#Spring-Boot初体验之Hello-World" class="headerlink" title="Spring Boot初体验之Hello World"></a>Spring Boot初体验之Hello World</h2><h4 id="Spring-Boot工程目录结构"><a href="#Spring-Boot工程目录结构" class="headerlink" title="Spring Boot工程目录结构"></a>Spring Boot工程目录结构</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/SB%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="SB工程目录"></p>
<h4 id="导入Web模块依赖"><a href="#导入Web模块依赖" class="headerlink" title="导入Web模块依赖"></a>导入Web模块依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HelloController &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @ResponseBody</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String hello()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Hello World!&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="运行主程序"><a href="#运行主程序" class="headerlink" title="运行主程序"></a>运行主程序</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E4%B8%BB%E7%A8%8B%E5%BA%8F.png" alt></p>
<h4 id="控制台打印的日志信息"><a href="#控制台打印的日志信息" class="headerlink" title="控制台打印的日志信息"></a>控制台打印的日志信息</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/%E6%97%A5%E5%BF%97.png" alt></p>
<h4 id="浏览器访问8080端口发送hello请求"><a href="#浏览器访问8080端口发送hello请求" class="headerlink" title="浏览器访问8080端口发送hello请求"></a>浏览器访问8080端口发送hello请求</h4><p><img src="/2020/01/07/Spring-Boot%E5%85%A5%E9%97%A8/hello.png" alt></p>
<h4 id="第一步走出去了！！！"><a href="#第一步走出去了！！！" class="headerlink" title="第一步走出去了！！！"></a>第一步走出去了！！！</h4><h2 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h2>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次接触Mybatis</title>
    <url>/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/</url>
    <content><![CDATA[<h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><h2 id><a href="#" class="headerlink" title></a><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt="工程目录"></h2><a id="more"></a>

<h2 id="porn-xml文件"><a href="#porn-xml文件" class="headerlink" title="porn.xml文件"></a>porn.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnMybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13-rc-2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr></table></figure>
<hr>
<h2 id="mybatis-config-xml全局配置文件"><a href="#mybatis-config-xml全局配置文件" class="headerlink" title="mybatis-config.xml全局配置文件"></a>mybatis-config.xml全局配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环境 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?    serverTimezone=UTC"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/study/mapper/UserMapper.xml"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure>
<hr>
<h2 id="User类以及Mysql中的user表"><a href="#User类以及Mysql中的user表" class="headerlink" title="User类以及Mysql中的user表"></a>User类以及Mysql中的user表</h2><h3 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/User%E7%B1%BB.png" alt="User类"></p>
<h3 id="user表"><a href="#user表" class="headerlink" title="user表"></a>user表</h3><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/user%E8%A1%A8.png" alt="user表"></p>
<hr>
<h2 id="UserMapper-xml文件配置"><a href="#UserMapper-xml文件配置" class="headerlink" title="UserMapper.xml文件配置"></a>UserMapper.xml文件配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.UserMapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectuser"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user where id=#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectall"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        select * from user</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></pre></td></tr></table></figure>

<hr>
<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String resource=<span class="string">"Mybatis-config.xml"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    InputStream in=Resources.getResourceAsStream(resource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSessionFactory sqlsf=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSession os=sqlsf.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//User u=os.selectOne("com.study.mapper.UserMapper.selectuser",1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;User&gt; ul=os.selectList(<span class="string">"com.study.mapper.UserMapper.selectall"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//System.out.println(u);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(User u:ul)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(u.getId()+<span class="string">","</span>+u.getUsername()+<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        os.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<hr>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/2019/12/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6MyBatis/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>   经过一番折腾，总算是把它弄出来了，在引用的时候要特别注意路径的问题，还有maven版本和mybatis版本也要注意，甚至时区问题都能有也是服了。mybatis类的属性名和表的字段名要一致。</p>
<h3 id="改革尚未成功，同志仍需努力。"><a href="#改革尚未成功，同志仍需努力。" class="headerlink" title="改革尚未成功，同志仍需努力。"></a>改革尚未成功，同志仍需努力。</h3>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>更换主题</title>
    <url>/2019/12/09/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>1 在E:\Hexo下用命令行安装：<br>    例如： git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia<br>2 配置：修改Hexo文件夹下_config.yml文件的theme为新主题名字<br>3 hexo clean 和 hexo g<br>4 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>发布文章</title>
    <url>/2019/12/09/%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>1 进入E:\Hexo目录<br>2 hexo new “文章标题”<br>3 在source/_posts下会生成.md文件<br>4 打开文件(Typora，VScode等软件)进行文章编写并保存<br>5 hexo clean清理<br>6 hexo g生成<br>7 hexo d同步到服务器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
